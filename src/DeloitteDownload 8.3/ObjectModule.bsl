Перем СписокПолей Экспорт;

Функция ТекстЗапросаПроводки() Экспорт
	Если СписокПолей = Неопределено Тогда 
		СписокПолей=Новый Массив();
		СписокПолей=СписокПолейПроводки();
	КонецЕсли;
	МетаданныеРегистрБух=Метаданные.РегистрыБухгалтерии.Найти(РегистрПроводки);
	Если МетаданныеРегистрБух.Корреспонденция Тогда
		ТекстСчет="Хозрасчетный.СчетДт, Хозрасчетный.СчетКт, ";
    Иначе
		ТекстСчет="Хозрасчетный.Счет, Хозрасчетный.ВидДвижения, ";
	КонецЕсли;
	ТекстСумма="";
	Если СписокПолей[0]<>Неопределено Тогда
		ТекстСумма="Хозрасчетный."+СписокПолей[0]+" КАК Сумма, ";	
	КонецЕсли;
	ТекстСодержание="";
	Если СписокПолей[2]<>Неопределено Тогда
		ТекстСодержание=", Хозрасчетный."+СписокПолей[2]+" КАК Содержание ";	
	КонецЕсли;
	ТекстОрганизация="";
	Если СписокПолей[1]<>Неопределено Тогда
		ТекстОрганизация="И Хозрасчетный."+СписокПолей[1]+".Наименование=&Организация ";	
	КонецЕсли;
	ТекстЗапроса="ВЫБРАТЬ 
	| Хозрасчетный.Регистратор.Номер, 
	| Хозрасчетный.НомерСтроки, 
	| Хозрасчетный.Период КАК Период, 
	| Хозрасчетный.Регистратор, " 
	+ТекстСчет
	+ТекстСумма+
	" Хозрасчетный.Регистратор.Ответственный КАК ОтветственныйПоДокументу, 
	| Хозрасчетный.Регистратор КАК Документ1,
	
	| ВЫБОР
	|	КОГДА Хозрасчетный.Регистратор.Контрагент.Ссылка ЕСТЬ NULL 
	|		ТОГДА """"
	|	ИНАЧЕ Выразить(Хозрасчетный.Регистратор.Контрагент.Код КАК Строка(6)) + Хозрасчетный.Регистратор.Контрагент.ИНН
	| КОНЕЦ КАК КонтрагентИдентификатор, 
	
	| Хозрасчетный.Регистратор.СчетКонтрагента.НомерСчета КАК СчетКонтрагента"
	+ТекстСодержание
	+"ИЗ
	| РегистрБухгалтерии."+РегистрПроводки+" КАК Хозрасчетный
	| ГДЕ
	| НАЧАЛОПЕРИОДА(Хозрасчетный.Период, ДЕНЬ) >= НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ)
	| И НАЧАЛОПЕРИОДА(Хозрасчетный.Период, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&ДатаКонца, ДЕНЬ)
	| И Хозрасчетный.Активность = ИСТИНА
	| И Хозрасчетный.Регистратор.ПометкаУдаления = ЛОЖЬ "
	+ТекстОрганизация+
	"УПОРЯДОЧИТЬ ПО
	| Период";
	
	Возврат ТекстЗапроса;
КонецФункции // ()

Функция ТекстЗапросаКонтрагенты(Юадр,ФАдр, Тел, Факс, ДатаНачала, ДатаКонца) Экспорт
	ТекстНаименованиеПолное="";
	Если СписокПолей[0]<>Неопределено Тогда
		ТекстНаименованиеПолное="МАКСИМУМ(ВЫРАЗИТЬ(Контрагенты."+СписокПолей[0]+" КАК СТРОКА(1000))) КАК НаименованиеПолное1, ";	
	КонецЕсли;
	ТекстИНН="";
	Если СписокПолей[1]<>Неопределено Тогда
		ТекстИНН="МАКСИМУМ(Контрагенты."+СписокПолей[1]+") КАК ИНН, ";	
	КонецЕсли;
    ТекстЮрФизЛицо="";
	Если СписокПолей[2]<>Неопределено Тогда
		ТекстЮрФизЛицо="МАКСИМУМ(Контрагенты."+СписокПолей[2]+") КАК ЮрФизЛицо, ";	
	КонецЕсли;
	ТекстУсловия="";
	Если (ДатаНачала<>'00010101') и (ДатаКонца<>'00010101') Тогда
		ТекстУсловия=" И НАЧАЛОПЕРИОДА(Хозрасчетный.Период, ДЕНЬ) >= &ДатаНачала
				     | И НАЧАЛОПЕРИОДА(Хозрасчетный.Период,ДЕНЬ) <= &ДатаКонца "
	КонецЕсли; 
	ТекстЗапроса= "ВЫБРАТЬ		
				   | 	Контрагенты.Ссылка,
				   | 	МИНИМУМ(Хозрасчетный.Период) КАК ДатаНачала,
				   | 	МАКСИМУМ(Хозрасчетный.Период) КАК ДатаКонца,
				   | 	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Хозрасчетный.Регистратор) КАК КолвоРазличныхДок
				   | 	ПОМЕСТИТЬ вт
				   | ИЗ
				   | 	Справочник." +НазваниеСправКонтрагенты+" КАК Контрагенты
				   | 	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии."+РегистрПроводки+" КАК Хозрасчетный
				   | 	ПО Контрагенты.Ссылка = Хозрасчетный.Регистратор.Контрагент.Ссылка
				   | ГДЕ
				   |	Контрагенты.ПометкаУдаления = ЛОЖЬ
				   |	И Контрагенты.ЭтоГруппа= ЛОЖЬ "
				   +ТекстУсловия+
				   " СГРУППИРОВАТЬ ПО
				   | 	Контрагенты.Ссылка
				   | ;
				   | ////////////////////////////////////////////////////////////////////////////////
                   
				  | ВЫБРАТЬ
	              | 	Контрагенты.Код + Контрагенты.ИНН КАК Идентификатор,
	              |		МАКСИМУМ(Контрагенты.Наименование) КАК Наименование, "
				  +ТекстНаименованиеПолное+
	              "		МАКСИМУМ(Контрагенты.Родитель.Наименование) КАК Родитель, "
	              +ТекстИНН
	              +ТекстЮрФизЛицо+
				  " 	МАКСИМУМ(вт.ДатаНачала) КАК ДатаПервойПроводки,
				  | 	МАКСИМУМ(вт.ДатаКонца) КАК ДатаПоследнейПроводки,
				  | 	МАКСИМУМ(вт.КолвоРазличныхДок) КАК КолвоРазличныхДок,
				  | 	МАКСИМУМ(ВЫБОР
				  |			КОГДА КонтактнаяИнформация.Вид.Наименование = &ЮАдр
				  |				ТОГДА ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000))
				  |		КОНЕЦ) КАК ЮрАдрес,
				  |		МАКСИМУМ(ВЫБОР
				  |			КОГДА КонтактнаяИнформация.Вид.Наименование = &ФАдр
				  |				ТОГДА ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000))
				  |		КОНЕЦ) КАК ФактАдрес,
				  |		МАКСИМУМ(ВЫБОР
				  |			КОГДА КонтактнаяИнформация.Вид.Наименование = &Тел
				  |				ТОГДА ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000))
				  |		КОНЕЦ) КАК Тел, 
				  |		МАКСИМУМ(ВЫБОР
				  |			КОГДА КонтактнаяИнформация.Вид.Наименование = &Факс
				  |				ТОГДА ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000))
				  |		КОНЕЦ) КАК Факс1 " +
				  ВидыКонтИнфТекст(ЮАдр, Фадр,Тел, Факс)+"
	              | ИЗ
	              |	Справочник." +НазваниеСправКонтрагенты+" КАК Контрагенты
				  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				  |		ПО (КонтактнаяИнформация.Объект = Контрагенты.Ссылка)
				  |     ЛЕВОЕ СОЕДИНЕНИЕ вт КАК вт
				  |     ПО Контрагенты.Ссылка = вт.Ссылка
				  |ГДЕ
				  |	Контрагенты.ПометкаУдаления = ЛОЖЬ
				  |	И Контрагенты.ЭтоГруппа= ЛОЖЬ
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	Контрагенты.Код + Контрагенты.ИНН
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Наименование";
	Возврат ТекстЗапроса;
КонецФункции // ()

Функция СформироватьЖурналыДляВыгрузки() экспорт
	мЖурналРегистрации=Новый ТаблицаЗначений();
	СтруктураФильтра=Новый Структура("Событие,ДатаНачала,ДатаОкончания");
	МассивСобытий=Новый Массив();
	Если Организация="данным" Тогда
		СтруктураФильтра=Новый Структура("Событие,ДатаНачала,ДатаОкончания,СтатусТранзакции");
		МассивСобытий.Добавить("_$Data$_.New");
		МассивСобытий.Добавить("_$Data$_.Update");	
		МассивСобытий.Добавить("_$Data$_.Post");	
		МассивСобытий.Добавить("_$Data$_.Delete");	
		МассивСобытий.Добавить("_$Job$_.Fail");	
		МассивСобытий.Добавить("_$Job$_.Start");	
		МассивСобытий.Добавить("_$Job$_.Succeed");
		СтруктураФильтра.СтатусТранзакции=СтатусТранзакцииЗаписиЖурналаРегистрации.Зафиксирована;
		КолонкиЖурнала="Дата,ИмяПользователя,Событие,ПредставлениеСобытия,Данные,ПредставлениеДанных,Метаданные,СтатусТранзакции,РазделениеДанныхСеанса,Комментарий";
	ИначеЕсли Организация="пользователям" Тогда
		МассивСобытий.Добавить("_$User$_.New");
		МассивСобытий.Добавить("_$User$_.Update");
		МассивСобытий.Добавить("_$User$_.Delete");
		КолонкиЖурнала="Дата,ИмяПользователя,Событие,ПредставлениеСобытия,Данные";
	Иначе      
		МассивСобытий.Добавить("_$InfoBase$_.ConfigUpdate");
		МассивСобытий.Добавить("_$InfoBase$_.DBConfigUpdate");
		КолонкиЖурнала="Дата,ИмяПользователя,Событие,ПредставлениеСобытия,Комментарий";
	КонецЕсли;
	СтруктураФильтра.Событие=МассивСобытий;	
	СтруктураФильтра.ДатаНачала=ДатаНачала;
	СтруктураФильтра.ДатаОкончания=ДатаКонца;
	Попытка
		ВыгрузитьЖурналРегистрации(мЖурналРегистрации,СтруктураФильтра,КолонкиЖурнала);
	Исключение
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Предупреждение("Невозможно выполнить операцию!");
		#КонецЕсли
		Возврат Неопределено;
	КонецПопытки; 
	мЖурналРегистрации.Сортировать("Дата");
	Если Организация="пользователям" тогда
		мЖурналРегистрации.Колонки.Добавить("ИмяНовогоПользователя"); 
		мЖурналРегистрации.Колонки.Добавить("ПолноеИмяНовогоПользователя");
		мЖурналРегистрации.Колонки.Добавить("АутентификацияСтандартная");
		мЖурналРегистрации.Колонки.Добавить("АутентификацияОС");
		мЖурналРегистрации.Колонки.Добавить("ПользовательОС");
		мЖурналРегистрации.Колонки.Добавить("ЗапрещеноИзменятьПароль");
		мЖурналРегистрации.Колонки.Добавить("ОсновнойИнтерфейс");
		мЖурналРегистрации.Колонки.Добавить("ПарольИзменен");
		мЖурналРегистрации.Колонки.Добавить("ПарольУстановлен");
		мЖурналРегистрации.Колонки.Добавить("ПоказыватьВСпискеВыбора");
		мЖурналРегистрации.Колонки.Добавить("РежимЗапуска");
		мЖурналРегистрации.Колонки.Добавить("Роли");
		Для каждого Строка1 Из мЖурналРегистрации Цикл 
			Если (Строка1.Событие="_$User$_.Update") или (Строка1.Событие="_$User$_.New") Тогда
				Попытка
					Строка1.АутентификацияОС=Строка1.Данные.АутентификацияОС;
				Исключение
				КонецПопытки;
				Попытка
					Строка1.АутентификацияСтандартная=Строка1.Данные.АутентификацияСтандартная;
				Исключение
				КонецПопытки;
				Попытка
					Строка1.ЗапрещеноИзменятьПароль=Строка1.Данные.ЗапрещеноИзменятьПароль;
				Исключение
				КонецПопытки;
				Попытка
					Строка1.ИмяНовогоПользователя=Строка1.Данные.Имя;
				Исключение
				КонецПопытки;
				Попытка
					Строка1.ОсновнойИнтерфейс=Строка1.Данные.ОсновнойИнтерфейс;
				Исключение
				КонецПопытки;
				Попытка
					Строка1.ПарольИзменен=Строка1.Данные.ПарольИзменен;
				Исключение
				КонецПопытки;
				Попытка
					Строка1.ПарольУстановлен=Строка1.Данные.ПарольУстановлен;
				Исключение
				КонецПопытки;
				Попытка
					Строка1.ПоказыватьВСпискеВыбора=Строка1.Данные.ПоказыватьВСпискеВыбора;
				Исключение
				КонецПопытки;
				Попытка
					Строка1.ПолноеИмяНовогоПользователя=Строка1.Данные.ПолноеИмя;
				Исключение
				КонецПопытки;
				Попытка
                    Строка1.ПользовательОС=Строка1.Данные.ПользовательОС;
				Исключение
				КонецПопытки;
				Попытка
					Строка1.РежимЗапуска=Строка1.Данные.РежимЗапуска;
				Исключение
				КонецПопытки;
				Попытка
					ТекстРоли="";
					Для каждого Роль1 Из Строка1.Данные.Роли Цикл
						ТекстРоли=ТекстРоли+СтрЗаменить(Роль1, "Роль.","")+", ";
					КонецЦикла; 
					Строка1.Роли=Лев(ТекстРоли, СтрДлина(ТекстРоли)-2);
				Исключение
				КонецПопытки;
			ИначеЕсли (Строка1.Событие="_$User$_.Delete") Тогда
				Попытка
					Строка1.ИмяНовогоПользователя=Строка1.Данные.Имя;
				Исключение
				КонецПопытки;
			Иначе
				мЖурналРегистрации.Удалить(Строка1);
			КонецЕсли; 

  		КонецЦикла;	
		мЖурналРегистрации.Колонки.Удалить("Данные");
	Иначе
		Для каждого Строка1 Из мЖурналРегистрации Цикл 
			Если МассивСобытий.Найти(Строка1.Событие)=Неопределено Тогда
				мЖурналРегистрации.Удалить(Строка1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	мЖурналРегистрации.Колонки.Дата.Заголовок=мЖурналРегистрации.Колонки.Дата.Имя+"|"+Строка(Формат(ДатаНачала,"ДФ=""ггггММдд"""))+"|"+Строка(Формат(ДатаКонца,"ДФ=""ггггММдд"""));
	мЖурналРегистрации.Колонки.Удалить("Событие");
	мЖурналРегистрации.Колонки.ПредставлениеСобытия.Заголовок="Событие";
	Возврат мЖурналРегистрации;
КонецФункции // ()
 
Функция БанкСчетаКонтрагентов() Экспорт
	Запрос1=Новый Запрос();
	Запрос1.Текст="ВЫБРАТЬ
	              |	Контрагенты.Код + Контрагенты.ИНН КАК Идентификатор,
	              |	БанковскиеСчета.НомерСчета
	              |ИЗ
	              |	Справочник.Контрагенты КАК Контрагенты
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	              |		ПО Контрагенты.Ссылка = БанковскиеСчета.Владелец.Ссылка
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Контрагенты.Наименование";
	РезультатВыборка=Запрос1.Выполнить().Выбрать();
	Возврат РезультатВыборка;
КонецФункции // ()

Функция ПолеФаксКонтрагента() Экспорт
	Запрос1=Новый Запрос();
	Запрос1.Текст="ВЫБРАТЬ
	              |	ВидыКонтактнойИнформации.Наименование
	              |ИЗ
				  |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
				  |ГДЕ
				  |	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации.Ссылка = &ВидК
	              |	И ВидыКонтактнойИнформации.Наименование ПОДОБНО ""[Ф,ф][А,а][К,к][С,с]%""";
	Парам=Перечисления["ВидыОбъектовКонтактнойИнформации"]["Контрагенты"];
	Запрос1.УстановитьПараметр("ВидК", Парам);
	Результат1=Запрос1.Выполнить().Выгрузить();
	СтрокаФакс=Результат1.Найти("Факс контрагента", "Наименование");
	Если СтрокаФакс=Неопределено Тогда
		СтрокаФакс=Результат1.Найти("Факс", "Наименование");
		Если СтрокаФакс=Неопределено Тогда
			Если Результат1.Количество()=0 Тогда	
				Возврат "";
			Иначе
				Возврат Результат1[0].Наименование;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтрокаФакс.Наименование;
КонецФункции

Функция ВидыКонтИнфТекст(Юадр,ФАдр, Тел, Факс) Экспорт
	ТекстЗапроса= "ВЫБРАТЬ
	              |	ВидыКонтактнойИнформации.Наименование КАК Наименование
				  |ИЗ
				  |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
				  |ГДЕ
				  |	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации.Ссылка = &ВидК
				  |
	              |УПОРЯДОЧИТЬ ПО
	              |	Наименование";
	Запрос1=Новый Запрос();
	Запрос1.Текст=ТекстЗапроса;
	Парам=Перечисления["ВидыОбъектовКонтактнойИнформации"]["Контрагенты"];
	Запрос1.УстановитьПараметр("ВидК", Парам);
	РезультатЗап1=Запрос1.Выполнить().Выгрузить();
	Текст=", ";
	Счетчик=0;
	НазвКИ="";
	Для каждого ВидКонтИнф Из РезультатЗап1 Цикл
		Если (ВидКонтИнф["Наименование"]<>"") и(ВидКонтИнф["Наименование"]<>Юадр) и (ВидКонтИнф["Наименование"]<>Фадр) и (ВидКонтИнф["Наименование"]<>Тел) и (ВидКонтИнф["Наименование"]<>Факс) Тогда
			Счетчик=Счетчик+1;
			Текст=Текст+"МАКСИМУМ(
			| ВЫБОР
			|	КОГДА КонтактнаяИнформация.Вид.Наименование = """+ВидКонтИнф["Наименование"]+
			"""		ТОГДА ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000))
	        |	КОНЕЦ) КАК "+глНаименованиеКолонки(ВидКонтИнф["Наименование"])+Прав("0"+счетчик,2) +", ";
			НазвКИ=НазвКИ+глНаименованиеКолонки(ВидКонтИнф["Наименование"])+"_987654321";
		КонецЕсли;
	КонецЦикла; 
	Текст=Лев(Текст, СтрДлина(Текст)-2);
	Возврат Текст;
КонецФункции

Функция ТекстЗапросаПланСчетов() Экспорт
ТекстЗапроса="ВЫБРАТЬ
             |	"+ПланСчетовНазвание+".Код КАК Код,
             |	"+ПланСчетовНазвание+".Наименование
             |ИЗ
             |	ПланСчетов."+ПланСчетовНазвание+" КАК "+ПланСчетовНазвание+"
             |
             |УПОРЯДОЧИТЬ ПО
             |	Код";
	Возврат ТекстЗапроса;
КонецФункции // ()

Функция ТекстЗапросаСправочники(СправочникИмя, ПолеСортировки, мОтмеченныеРеквизитыУФ = Неопределено) Экспорт
	
	Если мОтмеченныеРеквизитыУФ <> Неопределено Тогда
		ОтмеченныеРеквизиты = мОтмеченныеРеквизитыУФ;
	КонецЕсли;
	
	ТекстЗапроса="ВЫБРАТЬ ";
	Для каждого ОтмРеквизит Из ОтмеченныеРеквизиты  Цикл
		ТекстЗапроса=ТекстЗапроса+ОтмРеквизит+", ";		
	КонецЦикла; 
	ТекстЗапроса=Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-2)+" ИЗ Справочник."+ СправочникИмя+ " УПОРЯДОЧИТЬ ПО "+ ПолеСортировки;
	Возврат ТекстЗапроса;
КонецФункции // ()

Процедура СФормироватьЖурналы() Экспорт
	ЖурналРег=Новый ТаблицаЗначений();
	СтруктураФильтра=Новый Структура("Событие,ДатаНачала,ДатаОкончания");
	МассивСобытий=Новый Массив();
	МассивСобытий.Добавить("_$Data$_.New");
	МассивСобытий.Добавить("_$Data$_.Update");	
	МассивСобытий.Добавить("_$Data$_.Post");	
	СтруктураФильтра.Событие=МассивСобытий;	
	СтруктураФильтра.ДатаНачала=ДатаНачала;
	СтруктураФильтра.ДатаОкончания=ДатаКонца;	
	Попытка
		ВыгрузитьЖурналРегистрации(ЖурналРег,СтруктураФильтра,"Дата,ИмяПользователя,Данные,ПредставлениеМетаданных");
	Исключение
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Режим1 =РежимДиалогаВопрос.ДаНет;
			Текст = "Для продолжения работы необходимы административные права!"+Символы.ПС+"Без соответствующих прав не может быть выгружена необходимая информация."+Символы.ПС+"Продолжить выполнение операций с ограниченными правами?";
			Ответ = Вопрос(Текст, Режим1);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ФлагПользователи=0;
				Возврат;
			Иначе
				ФлагПользователи=1;
				Возврат;
			КонецЕсли;
		#Иначе
			ФлагПользователи=1;
			Возврат;
		#КонецЕсли
	КонецПопытки; 
	ЖурналРег.Сортировать("Дата Убыв");
КонецПроцедуры

Функция НайтиВЖурналеРег(Отбор)  Экспорт 
	Попытка
		СтрокиЖурналРег=ЖурналРег.НайтиСтроки(Отбор);
		Если (СтрокиЖурналРег.Количество()=0) Тогда
			Возврат "";    
		Иначе
			Возврат СтрокиЖурналРег[0].ИмяПользователя;
		КонецЕсли;
	Исключение
		Возврат "";
	КонецПопытки;
КонецФункции

Функция СформироватьРеквизитыРегистра()  Экспорт
	РеквизитыСписок=Новый Массив();
	МетаданныеРегистрБух=Метаданные.РегистрыБухгалтерии.Найти(РегистрПроводки);
	Для каждого РеквизитСсылка Из МетаданныеРегистрБух.Измерения Цикл
		РеквизитыСписок.Добавить(РеквизитСсылка.Имя);
	КонецЦикла; 
	Для каждого РеквизитСсылка Из МетаданныеРегистрБух.Реквизиты  Цикл	
		РеквизитыСписок.Добавить(РеквизитСсылка.Имя);
	КонецЦикла;
	Для каждого РеквизитСсылка Из МетаданныеРегистрБух.Ресурсы  Цикл	
		РеквизитыСписок.Добавить(РеквизитСсылка.Имя);	 
	КонецЦикла;
	Возврат РеквизитыСписок; 
КонецФункции

Функция СписокПолейПроводки() экспорт 
	РеквизитыСписок=Новый Массив();
	РеквизитыСписок=СформироватьРеквизитыРегистра();
	РеквизитыДляПроверки=Новый Массив();
	РеквизитыДляПроверки.Добавить("Сумма");
	РеквизитыДляПроверки.Добавить("Организация");
	РеквизитыДляПроверки.Добавить("Содержание");
	Счет=0;
	Для каждого РеквизитДляПроверки Из РеквизитыДляПроверки  Цикл
		Если РеквизитыСписок.Найти(РеквизитДляПроверки)=Неопределено Тогда
			РеквизитДляПроверкиОбщ=РеквизитДляПроверки;
			НазваниеСправКонтрагенты=Неопределено;
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ФормаРек=ПолучитьФорму("ФормаПроверкаРеквизитов");
				ОткрытьФормуМодально(ФормаРек);
			#КонецЕсли
			Если РеквизитДляПроверкиОбщ<>Неопределено Тогда
				РеквизитыДляПроверки[Счет]=РеквизитДляПроверкиОбщ;
			Иначе
				РеквизитыДляПроверки[Счет]=Неопределено;
			КонецЕсли; 
		КонецЕсли;
		Счет=Счет+1;
	КонецЦикла; 
	Возврат РеквизитыДляПроверки;
КонецФункции

Процедура НазваниеСправочникаКонтрагентов() экспорт
	Если Метаданные.Справочники.Найти("Контрагенты")=Неопределено Тогда
		ФормаСправ=ПолучитьФорму("ФормаПроверкаСправКонтрагенты");
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ОткрытьФормуМодально(ФормаСправ);	
		#КонецЕсли
		Если НазваниеСправКонтрагенты=Неопределено тогда
			Возврат;
		КонецЕсли;
	Иначе
		НазваниеСправКонтрагенты="Контрагенты";
	КонецЕсли; 	
КонецПроцедуры

Функция СформироватьРеквизитыКонтрагентов() экспорт
	РеквизитыСписок=Новый Массив();
	МетаданныеСправКонтр=Метаданные.Справочники.Найти(НазваниеСправКонтрагенты);
	Для каждого РеквизитСсылка Из МетаданныеСправКонтр.Реквизиты  Цикл	
		РеквизитыСписок.Добавить(РеквизитСсылка.Имя);
	КонецЦикла;
	Возврат РеквизитыСписок; 
КонецФункции 

Функция СписокПолейКонтрагенты() экспорт
	РеквизитыСписок=Новый Массив();
	РеквизитыСписок=СформироватьРеквизитыКонтрагентов();
	РеквизитыДляПроверки=Новый Массив();
	РеквизитыДляПроверки.Добавить("НаименованиеПолное"); 
	РеквизитыДляПроверки.Добавить("ИНН");
	РеквизитыДляПроверки.Добавить("ЮрФизЛицо");
	Счет=0;
	Для каждого РеквизитДляПроверки Из РеквизитыДляПроверки  Цикл
		Если РеквизитыСписок.Найти(РеквизитДляПроверки)=Неопределено Тогда
			РеквизитДляПроверкиОбщ=РеквизитДляПроверки;
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ФормаРек=ПолучитьФорму("ФормаПроверкаРеквизитов");
				ОткрытьФормуМодально(ФормаРек);
			#КонецЕсли
			Если РеквизитДляПроверкиОбщ<>Неопределено Тогда
				РеквизитыДляПроверки[Счет]=РеквизитДляПроверкиОбщ;
			Иначе
				РеквизитыДляПроверки[Счет]=Неопределено;
			КонецЕсли; 
		КонецЕсли;
		Счет=Счет+1;
	КонецЦикла; 
	Возврат РеквизитыДляПроверки;
КонецФункции

Функция глНаименованиеКолонки(Элемент, Символ="_") Экспорт 
	Перем Результат; 
	Результат = СтрЗаменить(Элемент," ",Символ); 
	Результат = СтрЗаменить(Результат,"/",Символ); 
	Результат = СтрЗаменить(Результат,"\",Символ); 
	Результат = СтрЗаменить(Результат,".",Символ); 
	Результат = СтрЗаменить(Результат,",",Символ); 
	Результат = СтрЗаменить(Результат,"+",Символ); 
	Результат = СтрЗаменить(Результат,"-",Символ); 
	Результат = СтрЗаменить(Результат,"!",Символ); 
	Результат = СтрЗаменить(Результат,"@",Символ); 
	Результат = СтрЗаменить(Результат,"#",Символ); 
	Результат = СтрЗаменить(Результат,"$",Символ); 
	Результат = СтрЗаменить(Результат,"%",Символ); 
	Результат = СтрЗаменить(Результат,"^",Символ); 
	Результат = СтрЗаменить(Результат,"&",Символ); 
	Результат = СтрЗаменить(Результат,"*",Символ); 
	Результат = СтрЗаменить(Результат,"(",Символ); 
	Результат = СтрЗаменить(Результат,")",Символ); 
	Результат = СтрЗаменить(Результат,"№",Символ); 
	Результат = СтрЗаменить(Результат,";",Символ); 
	Результат = СтрЗаменить(Результат,":",Символ); 
	Результат = СтрЗаменить(Результат,"?",Символ); 
	Возврат Результат; 
КонецФункции   

Функция УдалитьПустыеКолонки(РезультатДок)  экспорт
	Счетчик=0;
	РазницаПолей=РезультатДок.Колонки.Индекс(РезультатДок.Колонки.Найти("Факс1"));
	Для каждого Колонка Из РезультатДок.Колонки Цикл
	    Маскол=Новый Массив();
	   	МасКол=РезультатДок.ВыгрузитьКолонку(Колонка);
		Флаг=Ложь;
		Для каждого Элемент Из МасКол Цикл
			Если Элемент<> NULL Тогда
				Флаг=Истина;
				Прервать;	
			КонецЕсли;	
		КонецЦикла;  
		Если Флаг=Ложь и Счетчик>РазницаПолей Тогда
			НазвКИ=СтрЗаменить(НазвКИ, "_987654321"+Лев(Колонка.Имя, Стрдлина(Колонка.Имя)-2)+"_987654321","_987654321");
			РезультатДок.Колонки.Удалить(Колонка);
		КонецЕсли; 
		Счетчик=Счетчик+1;
	КонецЦикла; 	
	Возврат РезультатДок;
КонецФункции // ()

СписокПолей = Неопределено;