// Процедура обрабатывает открытие формы
Процедура ПриОткрытии()
	// Определяем по умолчанию что при закрытии формы выдается запрос на закрытие приложения.
	ФлагЗакрытия=Истина;
	// Обнуляем значение переменной, хранящей результаты запросов
	РезультатЗапроса=Неопределено;
	// Обнуляем значения всех полей для ввода
	ЭлементыФормы.ДатаНачала.Значение=Неопределено;
	ЭлементыФормы.ДатаКонца.Значение=Неопределено;
	ЭлементыФормы.ПолеВыбораОрганизации.Значение=Неопределено;
	// Выводим в заголовок формы наименование текущего режима выгрузки (проводки/контрагенты/справочники)	
	ЭтаФорма.Заголовок=Режим;
	Если Режим="Выгрузка списка проводок"  Тогда
		// Если выгружаем проводки, то делаем доступными поля для ввода дат и организации
		ЭлементыФормы.ДатаНачала.Доступность=Истина;
		ЭлементыФормы.ДатаКонца.Доступность=Истина;
		ЭлементыФормы.ПолеВыбораОрганизации.Доступность=Истина;
		//Формируем список организаций для поля выбора
		ЗапросСправ=Новый Запрос();
		Попытка
		ЗапросСправ.Текст="ВЫБРАТЬ
		                  | Организации.Наименование
		                  |ИЗ
		                  |	Справочник.Организации КАК Организации";
		Результат=ЗапросСправ.Выполнить();	
		Исключение
			// Если не удается выполнить запрос, то делаем поле для ввода организации недоступным
			ЭлементыФормы.ПолеВыбораОрганизации.Доступность=Ложь;
			Возврат;
		КонецПопытки;					  
		СписокОрг=Результат.Выбрать();
		ВыборОрганизации=Новый СписокЗначений();
		Пока СписокОрг.Следующий()  Цикл
			ВыборОрганизации.Добавить(СписокОрг.Наименование);	
		КонецЦикла;
		//Присоединяем сформированный список к полю выбора организации
		ЭлементыФормы.ПолеВыбораОрганизации.СписокВыбора=ВыборОрганизации;
		//Ставим первый элемент сформированного списка значением по умолчанию для  поля выбора органзации
		ЭлементыФормы.ПолеВыбораОрганизации.Значение=ВыборОрганизации[0];	
	ИначеЕсли  Режим="Выгрузка списка контрагентов" или Режим="Выгрузка журнала регистрации" Тогда
		// Если выгружаем контрагентов или журнал регистрации, то делаем доступными только поля для ввода дат
		ЭлементыФормы.ДатаНачала.Доступность=Истина;
		ЭлементыФормы.ДатаКонца.Доступность=Истина;
		Если Режим="Выгрузка журнала регистрации" Тогда
			ЭлементыФормы.ПолеВыбораОрганизации.Доступность=Истина;
			ЭлементыФормы.НадписьОрганизация.Заголовок="Отбор по:" ;
			ВыборДанных=Новый СписокЗначений();
			ВыборДанных.Добавить("данным");
			ВыборДанных.Добавить("пользователям");
			ВыборДанных.Добавить("изменениям конфигурации");
			ЭлементыФормы.ПолеВыбораОрганизации.СписокВыбора=ВыборДанных;
			ЭлементыФормы.ПолеВыбораОрганизации.Значение=ВыборДанных[1];
		Иначе
			ЭлементыФормы.ПолеВыбораОрганизации.Доступность=Ложь;
		КонецЕсли;
	Иначе
		//Если выгружаем не проводки и не контрагентов и не журнал регистрации, то делаем поля для ввода дат и организации недоступными 
		ЭлементыФормы.ДатаНачала.Доступность=Ложь;
		ЭлементыФормы.ДатаКонца.Доступность=Ложь;
		ЭлементыФормы.ПолеВыбораОрганизации.Доступность=Ложь;
	КонецЕсли; 
КонецПроцедуры

//Процедура выводит список проводок в таблицу на форме
Процедура ВывестиСписокПроводок()
	// Проверяем заполненность полей с датами и организацией. Если не заполнены, то прерываем процедуру
 	Если (Не ПроверкаЗаполнения(ДатаНачала, "Дата начала периода")) или (Не ПроверкаЗаполнения(ДатаКонца, "Дата конца периода"))или (НЕ ПроверкаДат(ДатаНачала,ДатаКонца)) или (ЭлементыФормы.ПолеВыбораОрганизации.Доступность и (Не ПроверкаЗаполнения(Организация, "Организация"))) Тогда
    	Возврат;
	КонецЕсли;
	СписокПолей=Новый Массив();
	СписокПолей=СписокПолейПроводки();
	// Если в переменной с результатом запроса ничего нет, то выполняем запрос
	Если РезультатЗапроса=Неопределено Тогда
		Запрос1=Новый Запрос();
		// Формируем текст запроса. Функция описана в Модуле объекта.
		Запрос1.Текст=ТекстЗапросаПроводки();
		Запрос1.УстановитьПараметр("ДатаНачала",ДатаНачала);
		Запрос1.УстановитьПараметр("ДатаКонца",ДатаКонца);
		Запрос1.УстановитьПараметр("Организация",Организация);
		РезультатЗапроса=Запрос1.Выполнить();
	КонецЕсли;
	Результат1=РезультатЗапроса.Выгрузить();
	//Вставляем колонки, в которых в итоге будут нужные сведения
	Результат1.Колонки.Вставить(2,"ИдентификаторПроводки");
	Результат1.Колонки.Вставить(8,"Пользователь");
	Результат1.Колонки.Вставить(10,"Документ");
	Результат1.Колонки.Добавить("Содержание1");
	// Флаг для выгрузки пользователей из журнала регистрации. Если он равен 2, значит достаточно прав для выгрузки из журнала регистрации.
	ФлагПользователи=2;
	// Формируем журналы с событиями из журнала регистрации. Процедура вызывается из Модуля объекта.
	СФормироватьЖурналы(); 
	// Если достаточно прав для выгрузки пользователей
	Если ФлагПользователи=2 Тогда
		Для каждого СтрокаТабл  Из Результат1 Цикл
			// Формируем идентификатор проводки
			СтрокаТабл["ИдентификаторПроводки"]= СтрокаТабл["РегистраторНомер"] +Строка(СтрокаТабл["НомерСтроки"]);
			Отбор=Новый Структура();
			Отбор.Вставить("Данные", СтрокаТабл["Регистратор"]);
			// Ищем в журнале сведения по данному регистратору. Записывам пользователя, который произвел действия с регистратором.
			СтрокаТабл["Пользователь"]=НайтиВЖурналеРег(Отбор); 
			//Выделяем из строки с названием регистратора его тип.
			СтрокаТабл["Документ"]=Лев(СтрокаТабл["Документ1"],Найти(СтрокаТабл["Документ1"],СтрокаТабл["РегистраторНомер"])-1);
			// Заменяем в строке с содержанием перевод строки на пробел
			СтрокаТабл["Содержание1"]=СтрЗаменить(СтрокаТабл["Содержание"], Символы.ПС, " ");	
		КонецЦикла; 
	// Если недостаточно прав для выгрузки пользователей и выгрузка продолжается
	ИначеЕсли ФлагПользователи=1 Тогда 	
		Для каждого СтрокаТабл  Из Результат1 Цикл
			// Формируем идентификатор проводки
			СтрокаТабл["ИдентификаторПроводки"]= СтрокаТабл["РегистраторНомер"] +Строка(СтрокаТабл["НомерСтроки"]); 
			//Выделяем из строки с названием регистратора его тип
			СтрокаТабл["Документ"]=Лев(СтрокаТабл["Документ1"],Найти(СтрокаТабл["Документ1"],СтрокаТабл["РегистраторНомер"])-1);
			// Заменяем в строке с содержанием перевод строки на пробел
			СтрокаТабл["Содержание1"]=СтрЗаменить(СтрокаТабл["Содержание"], Символы.ПС, " ");
		КонецЦикла;
	// Если недостаточно прав для выгрузки пользователей и выгрузка прервана, то прекращаем выгрузку.
	Иначе
		Возврат;
	КонецЕсли; 
	// Удаляем лишние поля
	Результат1.Колонки.Удалить(0);
	Результат1.Колонки.Удалить("Регистратор");
	Результат1.Колонки.Удалить("НомерСтроки");
	Результат1.Колонки.Удалить("Документ1");
	Результат1.Колонки.Удалить("Содержание");
	// Добавляем в заголовок первого поля даты, за которые были выгружены проводки
	Результат1.Колонки[0].Заголовок="ИдентификаторПроводки|"+Строка(Формат(ДатаНачала,"ДФ=""ггггММдд"""))+"|"+Строка(Формат(ДатаКонца,"ДФ=""ггггММдд"""));
	Результат1.Колонки.Содержание1.Заголовок="Содержание";
	// Выводим результат на форму
	ЭлементыФормы.ТабличноеПоле1.Значение=Результат1;
	ЭлементыФормы.ТабличноеПоле1.СоздатьКолонки();
	// Указываем формат дат
	ЭлементыФормы.ТабличноеПоле1.Колонки.Период.Формат="ДФ=""дд.ММ.гггг""";
	// Указываем формат суммы, если это поле было выгружено
	Попытка
		ЭлементыФормы.ТабличноеПоле1.Колонки.Сумма.Формат="ЧРД="".""; ЧРГ="" """;
	Исключение
	КонецПопытки;
	// Выводим в подпись под табличонй частью количество проводок
	ЭлементыФормы.КолЗаписейЗначТекст.Значение=Результат1.Количество();
КонецПроцедуры

// Процедура выводит список контрагентов в таблицу на форме
Процедура ВывестиСписокКонтрагентов()
	// Проверяем заполненность полей с датами и корректность ввода дат.
	Если (Не ПроверкаЗаполненияКонтрагенты(ДатаНачала,ДатаКонца)) или(НЕ ПроверкаДат(ДатаНачала,ДатаКонца))  Тогда
    	Возврат;	
	КонецЕсли;
	// Проверяем правильно ли назван справочник Контрагенты. Процедура описана в Модуле объекта.
	НазваниеСправочникаКонтрагентов();
	// Если не введено корректное название справочника, то выполнение процедуры прерывается
	Если НазваниеСправКонтрагенты="" Тогда
		Возврат;
	КонецЕсли;
	// Если есть название справочника контрагентов, то проверяем наличие необходимых полей. Функция СписокПолейКонтрагенты() вызывается из Модуля объекта
	СписокПолей=Новый Массив();
	СписокПолей=СписокПолейКонтрагенты();
	// Если запрос не выполнялся
	Если РезультатЗапроса=Неопределено Тогда
		Запрос1=Новый Запрос();
		// Формируем параметры для запроса. 
		// ЮрАдресКонтрагента, ФактАдресКонтрагента и ТелефонКонтрагента - поля, которые отображаются в карточке контрагента.
		ЮАдр=Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента.Наименование;
		ФАдр=Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента.Наименование;
		Тел=Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.Наименование;
		Факс=ПолеФаксКонтрагента();
		// Формируем текст запроса. Функция описана в Модуле объекта.
		Запрос1.Текст=ТекстЗапросаКонтрагенты(Юадр,Фадр,Тел,Факс,ДатаНачала,ДатаКонца);
		Запрос1.УстановитьПараметр("ЮАдр",ЮАдр);
		Запрос1.УстановитьПараметр("ФАдр",Фадр);
		Запрос1.УстановитьПараметр("Тел",Тел);
		Запрос1.УстановитьПараметр("Факс",Факс);
		Запрос1.УстановитьПараметр("ДатаНачала",ДатаНачала);
		Запрос1.УстановитьПараметр("ДатаКонца",ДатаКонца);
		РезультатЗапроса=Запрос1.Выполнить();
	КонецЕсли;
	Результат2=РезультатЗапроса.Выгрузить(); 
	Результат1=Новый ТаблицаЗначений();
	// Если какие-то из колонок с контактной информацией полностью пустые, то удаляем такие колонки. Функция описана в Модуле объекта.
	Результат1=УдалитьПустыеКолонки(Результат2);
	// Ставим флаг, определяющий, выгружено ли НаименованиеПолное
	ЕстьНаимПолное=Результат1.Колонки.Найти("НаименованиеПолное1")<>Неопределено;	
	// Определяем, сколько полей не было выгружено
	РазницаПолей=9-Результат1.Колонки.Индекс(Результат1.Колонки.Найти("ЮрАдрес"));
	// Если НаименованиеПолное выгружено, то вставляем колонку, в котором будет храниться значение
	Если ЕстьНаимПолное Тогда 	
		Результат1.Колонки.Вставить(3,"НаименованиеПолное");
	// В противном случае увеличиваем разницу полей, так как еще одна колонка для полного наименования не была добавлена	
	Иначе
		РазницаПолей=РазницаПолей+1;
	КонецЕсли;
	// Вставляем колонки, в которых будет нужная инфорация.
	Результат1.Колонки.Вставить(7-РазницаПолей,"БанковскиеСчета");
	Результат1.Колонки.Вставить(11-РазницаПолей,"ЮридическийАдрес");
	Результат1.Колонки.Вставить(12-РазницаПолей,"ФактическийАдрес");
	Результат1.Колонки.Вставить(13-РазницаПолей,"Телефон");
	Результат1.Колонки.Вставить(14-РазницаПолей,"Факс");
	Результат1.Колонки.Вставить(15-РазницаПолей,"КИ");
	// Формируем нормальный заголовок колонки с КИ. Заменяем разделители полей и слов, которые были сформированы в запросе.
	Результат1.Колонки[15-РазницаПолей].Заголовок=СтрЗаменить(СтрЗаменить(НазвКИ, "_987654321","|"),"_"," ");
	КолвоПолей=Результат1.Колонки.Количество();
	// Cчитаем кол-во полей с КИ (общее количество полей минус кол-во полей без КИ.)
	КолвоПолейКИ=Результат1.Колонки.Количество()-(19-РазницаПолей);
	// Формируем выборку с банковскими счетами контрагентов. Функция описана в Модуле объекта.
	БанкСчета=БанкСчетаКонтрагентов();
	// Перебираем всех контрагентов
	Для каждого СтрокаТабл  Из Результат1 Цикл
		СтрокаСчета="";
		СтрукПоиск=Новый Структура();
		// Формируем критерий для поиска в выборке банковских счетов контрагентов: ищем по идентификатору 
		СтрукПоиск.Вставить("Идентификатор", СтрокаТабл["Идентификатор"]);
		// Если есть банковские счета для данного контрагента, то добавляем их в строку с раздедителем
		Пока БанкСчета.НайтиСледующий(СтрукПоиск) Цикл
			СтрокаСчета=СтрокаСчета+БанкСчета.НомерСчета+"|";	
		КонецЦикла;	
		// Убираем последний, лишний разделитель
		СтрокаСчета=Лев(СтрокаСчета,СтрДлина(СтрокаСчета)-1);
		СтрокаТабл["БанковскиеСчета"]=СтрокаСчета;
		// Если выгружено НаименованиеПолное, то записываем его значение без лишних пробелов справа
		Если ЕстьНаимПолное Тогда
			СтрокаТабл["НаименованиеПолное"]=СокрП(СтрокаТабл["НаименованиеПолное1"]);		
		КонецЕсли; 
		// Записываем значения юридического адреса, фактического адреса и телефона без лишних пробелов справа и без символов переноса строки.
		СтрокаТабл["ЮридическийАдрес"]=СтрЗаменить(СокрП(СтрокаТабл["ЮрАдрес"]),Символы.ПС, " ");
		СтрокаТабл["ФактическийАдрес"]=СтрЗаменить(СокрП(СтрокаТабл["ФактАдрес"]),Символы.ПС, " ");
		СтрокаТабл["Телефон"]=СтрЗаменить(СокрП(СтрокаТабл["Тел"]),Символы.ПС, " ");
		СтрокаТабл["Факс"]=СтрЗаменить(СокрП(СтрокаТабл["Факс1"]),Символы.ПС, " ");
		// Ставим счетчик на начало полей с КИ
		Счетчик=19-РазницаПолей;
		СтрокаКИ="";
		// Перебираем все поля с КИ (начиная с счетчика и до конца), заменяем перевод строки на пробел и записываем в строку с разделителем 
		Пока Счетчик<КолвоПолей Цикл
			СтрокаКИ=СтрокаКИ+СтрЗаменить(СтрокаТабл[Счетчик],Символы.ПС, " ")+"|";
			Счетчик=Счетчик+1;
		КонецЦикла;
		// Записываем в созданное поле для КИ сформированную строку
		СтрокаТабл[15-РазницаПолей]=СтрокаКИ;
	КонецЦикла; 
	// Если было выгружено наименование полное,то удаляем колонку и указываем, что будет удалено всего 5 колонок
	Если ЕстьНаимПолное Тогда
		Результат1.Колонки.Удалить("НаименованиеПолное1");
		КолвоУдалПолей=5;
	// В противном случае возвращаем разницу кол-ва полей к исходному значению и указываем, что будет удалено только 4 колонки	
	Иначе
		РазницаПолей=РазницаПолей-1;
		КолвоУдалПолей=4;
	КонецЕсли;
	// Удаляем лишние колонки
	Результат1.Колонки.Удалить("ЮрАдрес");
	Результат1.Колонки.Удалить("ФактАдрес");
	Результат1.Колонки.Удалить("Тел");
	Результат1.Колонки.Удалить("Факс1");
	// Ставим счетчик на начало полей с КИ
	Счетчик=15-РазницаПолей;
	// Удаляем поля с КИ.
	Пока Счетчик<КолвоПолей-КолвоУдалПолей Цикл
		Результат1.Колонки.Удалить(15-РазницаПолей);
		Счетчик=Счетчик+1;
	КонецЦикла;
	// Добавляем в колонку с идентификатором даты, определенные при выгрузке.
	Результат1.Колонки[0].Заголовок="Идентификатор|"+Строка(Формат(ДатаНачала,"ДФ=""ггггММдд"""))+"|"+Строка(Формат(ДатаКонца,"ДФ=""ггггММдд"""));
	// Выводим результат на форму
	ЭлементыФормы.ТабличноеПоле1.Значение=Результат1;
	ЭлементыФормы.ТабличноеПоле1.СоздатьКолонки();
	// Выводим количество записей под табличную часть
	ЭлементыФормы.КолЗаписейЗначТекст.Значение=Результат1.Количество();
	// Определяем формат дат в выгрузке
	ЭлементыФормы.ТабличноеПоле1.Колонки.ДатаПервойПроводки.Формат="ДФ=""дд.ММ.гггг""";
	ЭлементыФормы.ТабличноеПоле1.Колонки.ДатаПоследнейПроводки.Формат="ДФ=""дд.ММ.гггг""";
 КонецПроцедуры
 
// Процедура выводит план счетов в таблицу на форме
Процедура ВывестиПланСчетов()
	// Если запрос не выполнялся
	Если РезультатЗапроса=Неопределено Тогда
		Запрос1=Новый Запрос();
		// Формируем текст запроса. Функция описана в Модуле объекта.
		Запрос1.Текст=ТекстЗапросаПланСчетов();
		РезультатЗапроса=Запрос1.Выполнить();
	КонецЕсли;
	Результат1=РезультатЗапроса.Выгрузить();
	ЭлементыФормы.ТабличноеПоле1.Значение=Результат1;
	ЭлементыФормы.ТабличноеПоле1.СоздатьКолонки();
	ЭлементыФормы.КолЗаписейЗначТекст.Значение=Результат1.Количество();
КонецПроцедуры

Процедура ВывестиЖурналРег()
	Если РезультатЗапроса=Неопределено Тогда 
		Если (Не ПроверкаЗаполненияКонтрагенты(ДатаНачала,ДатаКонца)) или(НЕ ПроверкаДат(ДатаНачала,ДатаКонца))  Тогда
	    	Возврат;	
		КонецЕсли;
		РезультатЗапроса=Новый ТаблицаЗначений();
		РезультатЗапроса=СформироватьЖурналыДляВыгрузки();
		Если РезультатЗапроса=Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// Выводим результат на форму
	ЭлементыФормы.ТабличноеПоле1.Значение=РезультатЗапроса;
	ЭлементыФормы.ТабличноеПоле1.СоздатьКолонки();
	ЭлементыФормы.ТабличноеПоле1.Колонки.Дата.Формат="ДФ=""дд.ММ.гггг ЧЧ:мм:сс""";
	// Выводим в подпись под табличонй частью количество проводок
	ЭлементыФормы.КолЗаписейЗначТекст.Значение=РезультатЗапроса.Количество();
КонецПроцедуры

// Процедура выводит сообщение о том, какое кол-во проводок будет выгружено
 Процедура ВывестиКоличествоПроводок()
	// Проверяем правильность заполнения дат и организации. Если неправильно, то прекращаем работу процедуры. 
	Если (Не ПроверкаЗаполнения(ДатаНачала, "Дата начала периода")) или (Не ПроверкаЗаполнения(ДатаКонца, "Дата конца периода"))или (НЕ ПроверкаДат(ДатаНачала,ДатаКонца)) или (ЭлементыФормы.ПолеВыбораОрганизации.Доступность и (Не ПроверкаЗаполнения(Организация, "Организация"))) Тогда
    	Возврат;
	КонецЕсли;
	// Если запрос не выполнялся...
	Если РезультатЗапроса=Неопределено Тогда
		Запрос1=Новый Запрос();
		// Формируем текст запроса. Функция описана ниже.
		Запрос1.Текст=ТекстЗапросаПроводкиКоличество();
		Запрос1.УстановитьПараметр("ДатаНачала",ДатаНачала);
		Запрос1.УстановитьПараметр("ДатаКонца",ДатаКонца);
		Запрос1.УстановитьПараметр("Организация",Организация);
		Результат1=Запрос1.Выполнить().Выбрать();
		// В результате запроса всего одна строка. Переходим к ней
		Пока Результат1.Следующий() Цикл
			// Берем значение из выгруженного поля "Всего" и выводим сообщение о кол-ве записей.
		    Предупреждение(Строка(Результат1.Всего)+" записей");
			Возврат;
		КонецЦикла;	
	// Если запрос уже выполнялся, то берем кол-во записей в РезультатЗапроса и выводим сообщение о кол-ве записей	
	Иначе
		Предупреждение(Строка(РезультатЗапроса.Выбрать().Количество())+" записей");
	КонецЕсли;	
КонецПроцедуры
 
// Процедура выводит сообщение о том, сколько контрагентов будет выгружнено.
Процедура ВывестиКоличествоКонтрагентов()
	Если НазваниеСправКонтрагенты="" Тогда
		НазваниеСправочникаКонтрагентов();
		Если НазваниеСправКонтрагенты="" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	// Если запрос не выполнялся...
	Если РезультатЗапроса=Неопределено Тогда
		Запрос1=Новый Запрос();
		// Формируем текст запроса. Функция описана ниже.
		Запрос1.Текст=ТекстЗапросаКонтрагентыКоличество();
		Результат1=Запрос1.Выполнить().Выбрать();
		// В результате запроса всего одна строка. Переходим к ней
		Пока Результат1.Следующий() Цикл
	    	// Берем значение из выгруженного поля "Всего" и выводим сообщение о кол-ве записей.
		    Предупреждение(Строка(Результат1.Всего)+" записей");
		КонецЦикла;	
	// Если запрос уже выполнялся, то берем кол-во записей в РезультатЗапроса и выводим сообщение о кол-ве записей		
	Иначе
		Предупреждение(Строка(РезультатЗапроса.Выбрать().Количество())+ " записей");
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиКолвоЖурРег()
	Если РезультатЗапроса=Неопределено Тогда 
		Если (Не ПроверкаЗаполненияКонтрагенты(ДатаНачала,ДатаКонца)) или(НЕ ПроверкаДат(ДатаНачала,ДатаКонца))  Тогда
	    	Возврат;	
		КонецЕсли;
		РезультатЗапроса=Новый ТаблицаЗначений();
		РезультатЗапроса=СформироватьЖурналыДляВыгрузки();
		Если РезультатЗапроса=Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
    Предупреждение(Строка(РезультатЗапроса.Количество())+ " записей"); 
КонецПроцедуры


// Процедура выводит сообщение о том, сколько счетов будет выгружено
Процедура ВывестиКоличествоСчетов()
	// Если запрос не выполнялся...
	Если РезультатЗапроса=Неопределено Тогда
		Запрос1=Новый Запрос();
		// Формируем текст запроса. Функция описана ниже.
		Запрос1.Текст=ТекстЗапросаПланСчетовКоличество();
		Результат1=Запрос1.Выполнить().Выбрать();
		// В результате запроса всего одна строка. Переходим к ней
		Пока Результат1.Следующий() Цикл
	    	// Берем значение из выгруженного поля "Всего" и выводим сообщение о кол-ве записей.
		    Предупреждение(Строка(Результат1.Всего)+" записей");
		КонецЦикла;	
	// Если запрос уже выполнялся, то берем кол-во записей в РезультатЗапроса и выводим сообщение о кол-ве записей	
	Иначе
		Предупреждение(Строка(РезультатЗапроса.Выбрать().Количество())+ " записей");
	КонецЕсли;
КонецПроцедуры

// Процедура обрабатывает нажатие на кнопку "Вывести список" на форме
Процедура КоманднаяПанель2ВывестиСписок(Кнопка)
	// В зависимости от того, что записано в переменной Режим, выполняем соответствующие процедуры, описанные выше
	Если Режим="Выгрузка списка проводок" Тогда
		ВывестиСписокПроводок();
	ИначеЕсли Режим="Выгрузка списка контрагентов" Тогда
	    ВывестиСписокКонтрагентов();
	ИначеЕсли Режим="Выгрузка журнала регистрации" Тогда
		ВывестиЖурналРег();
	Иначе
		ВывестиПланСчетов();
	КонецЕсли; 		
КонецПроцедуры

// Процедура обрабатывает нажатие на кнопку "Вывести количество" на форме
Процедура КоманднаяПанель2ВывестиКоличество(Кнопка)
	// В зависимости от того, что записано в переменной Режим, выполняем соответствующие процедуры, описанные выше
	Если Режим="Выгрузка списка проводок" Тогда
		ВывестиКоличествоПроводок();
	ИначеЕсли Режим="Выгрузка списка контрагентов" Тогда
	    ВывестиКоличествоКонтрагентов();
	ИначеЕсли Режим="Выгрузка журнала регистрации" Тогда
	    ВывестиКолвоЖурРег();
	Иначе
		ВывестиКоличествоСчетов();
	КонецЕсли; 		
КонецПроцедуры

// Функция формирует текст запроса, выводящего кол-во проводок
Функция ТекстЗапросаПроводкиКоличество() 
	ТекстЗапроса="ВЫБРАТЬ Сумма(1) КАК Всего
				|ИЗ
				// РегистрПроводки содержит название текущего регистра бухгалтерии
				| РегистрБухгалтерии."+РегистрПроводки+" КАК Хозрасчетный
				|ГДЕ
				| НАЧАЛОПЕРИОДА(Хозрасчетный.Период, ДЕНЬ) >= &ДатаНачала
				| И НАЧАЛОПЕРИОДА(Хозрасчетный.Период, ДЕНЬ) <= &ДатаКонца
				| И Хозрасчетный.Активность = ИСТИНА
				| И Хозрасчетный.Регистратор.ПометкаУдаления = ЛОЖЬ
				| И Хозрасчетный.Организация.Наименование=&Организация";
	Возврат ТекстЗапроса;
КонецФункции 

// Функция формирует текст запроса, выводящего кол-во контрагентов
Функция ТекстЗапросаКонтрагентыКоличество() 
	ТекстЗапроса="ВЫБРАТЬ
	             |	СУММА(1) КАК Всего
	             |ИЗ
				 // НазваниеСправКонтрагенты содержит название справочника контрагентов
				 |	Справочник."+НазваниеСправКонтрагенты+" КАК Контрагенты
	             |ГДЕ
	             |	Контрагенты.ПометкаУдаления = ЛОЖЬ
	             |	И (НЕ Контрагенты.НаименованиеПолное ЕСТЬ NULL )
	             |	И (НЕ ПОДСТРОКА(Контрагенты.НаименованиеПолное, 1, 1) = """")";
	Возврат ТекстЗапроса;
КонецФункции 

// Функция формирует текст запроса, выводящего кол-во счетов
Функция ТекстЗапросаПланСчетовКоличество() 
	ТекстЗапроса="ВЫБРАТЬ
	             |	СУММА(1) КАК Всего
	             |ИЗ
	             |	ПланСчетов."+ПланСчетовНазвание;
	Возврат ТекстЗапроса;
КонецФункции 

// Функция проверяет значение поля и при отсутствии значения выдает сообщение
Функция ПроверкаЗаполнения(Поле1, НазваниеПоля) 
	ТипПоля=ТипЗнч(Поле1); 	 	
	// В зависимости от типа поля, проверяем его значения. Если нет значения, то выводим сообщение.
	Если Поле1=Неопределено или ((ТипПоля=Тип("Строка")) и (Поле1="")) или (ТипПоля=Тип("Дата")) и (Поле1='00010101') или (ТипПоля=Тип("Число") и (Поле1=0) ) Тогда
		Предупреждение(НазваниеПоля+": не заполнено")	;
		Возврат Ложь;
	Иначе	
		Возврат Истина		
	КонецЕсли; 
КонецФункции 

// Функция проверяет корректность ввода дат: дата начала должна быть раньше, чем дата конца.
Функция ПроверкаДат(ДатаНачала,ДатаКонца) 
	Если ДатаНачала>ДатаКонца Тогда
		Предупреждение("Дата начала периода задана позже даты конца периода!")	;
		Возврат Ложь;
    Иначе
		Возврат Истина;
	КонецЕсли; 	
КонецФункции 

Функция ПроверкаЗаполненияКонтрагенты (ДатаНачала, ДатаКонца)
	Если ДатаНачала='00010101' и ДатаКонца='00010101' Тогда
		Режим1 = РежимДиалогаВопрос.ОКОтмена;
		Текст = "Для сокращения времени выгрузки рекомендуется ввести даты начала и конца рассматриваемого периода."+Символы.ПС+
 		"Для возврата и ввода дат нажмите ""Отмена""."+Символы.ПС+
		"Для продолжения процесса выгрузки нажмите ""ОК"".";
		Ответ = Вопрос(Текст, Режим1);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
	    	Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Если (Не ПроверкаЗаполнения(ДатаНачала, "ДатаНачала")) или (Не ПроверкаЗаполнения(ДатаКонца, "ДатаКонца")) Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
КонецФункции 

Процедура КоманднаяПанель2ТекстФайл(Кнопка)
	Если Режим="Выгрузка списка проводок" Тогда
		Если (Не ПроверкаЗаполнения(ДатаНачала, "Дата начала периода")) или (Не ПроверкаЗаполнения(ДатаКонца, "Дата конца периода"))или (НЕ ПроверкаДат(ДатаНачала,ДатаКонца)) или (ЭлементыФормы.ПолеВыбораОрганизации.Доступность и (Не ПроверкаЗаполнения(Организация, "Организация"))) Тогда
    		Возврат;
		КонецЕсли;
		СписокПолей=Новый Массив();
		СписокПолей=СписокПолейПроводки();
	ИначеЕсли Режим="Выгрузка списка контрагентов" Тогда
		Если (Не ПроверкаЗаполненияКонтрагенты(ДатаНачала,ДатаКонца)) или(НЕ ПроверкаДат(ДатаНачала,ДатаКонца))  Тогда
	    	Возврат;	
		КонецЕсли;
		НазваниеСправочникаКонтрагентов();
		Если НазваниеСправКонтрагенты="" Тогда
			Возврат;
		КонецЕсли;
		СписокПолей=Новый Массив();
		СписокПолей=СписокПолейКонтрагенты();	
	КонецЕсли;
	ФормаСохранения=ОбработкаОбъект.ПолучитьФорму("ФормаТекстФайл");
	Результат=ФормаСохранения.ОткрытьМодально();
КонецПроцедуры

Процедура ОсновныеДействияФормыНазад(Кнопка)
	ФормаВыбора1=ПолучитьФорму("ФормаВыбора");
	ФормаВыбора1.Открыть();
	ФлагЗакрытия=Ложь;
	ЭтаФорма.Закрыть();
КонецПроцедуры

Процедура ПриЗакрытии()
	РезультатЗапроса=Неопределено;
КонецПроцедуры

Процедура ПолеВыбораОрганизацииПриИзменении(Элемент)
	РезультатЗапроса=Неопределено;
КонецПроцедуры

Процедура ДатаНачалаПриИзменении(Элемент)
	РезультатЗапроса=Неопределено;
КонецПроцедуры

Процедура ДатаКонцаПриИзменении(Элемент)
	РезультатЗапроса=Неопределено;
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если  ФлагЗакрытия Тогда
		Режим1 = РежимДиалогаВопрос.ДаНет;
		Текст = "Закончить работу обработки?";
		Ответ = Вопрос(Текст, Режим1);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
	    	Отказ=истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

