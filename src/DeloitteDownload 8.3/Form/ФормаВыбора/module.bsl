//Процедура обрабатывает нажатие кнопки "Выполнить"
Процедура ВыполнитьНажатие(Элемент)  
	ВыбранноеЗначение=ЭлементыФормы.ПолеВыбораОперации.Значение; 
	Если ВыбранноеЗначение=Неопределено Тогда 
		// Если не был выбран ни один из режимов выгрузки, то  выдается сообщение
		Предупреждение("Не выбрана операция!");
		Возврат;
	ИначеЕсли (ВыбранноеЗначение="Выгрузка списка проводок") или (ВыбранноеЗначение="Выгрузка списка контрагентов") или (ВыбранноеЗначение="Выгрузка плана счетов") или (ВыбранноеЗначение="Выгрузка журнала регистрации") Тогда 
		// Если был выбран режим "Выгрузка списка проводок" или  "Выгрузка списка проводок" или "Выгрузка плана счетов",
		// то открывается общая форма для выгрузки
		Режим=ВыбранноеЗначение;
		ФормаВыгрузкиИмя=ОбработкаОбъект.ПолучитьФорму("ФормаВыгрузки");
		ОткрытьФорму(ФормаВыгрузкиИмя);
		// Говорим, что при закрытии текущей формы, само приложение не закрывается 
		ФлагЗакрытия=Ложь;
		// Закрываем форму выбора
		ЭтаФорма.Закрыть();
	ИначеЕсли ВыбранноеЗначение="Пользователи НСИ" Тогда 
		// Если был выбран режим выгрузки прав пользователей, то проверяем достаточность прав пользователя на выполнение операции
		Попытка
			Пользователи1=ПользователиИнформационнойБазы.ПолучитьПользователей();
		Исключение
			Предупреждение("Недостаточно прав доступа! Необходимы административные права!");
			Возврат;	
		КонецПопытки;
		Режим=ВыбранноеЗначение;
		// Открываем нужную форму
		ФормаПользователиИмя=ОбработкаОбъект.ПолучитьФорму("ФормаПользователи");
		ОткрытьФорму(ФормаПользователиИмя);
		// Говорим, что при закрытии текущей формы, само приложение не закрывается 
		ФлагЗакрытия=Ложь;
		// Закрываем форму выбора
		ЭтаФорма.Закрыть();
	ИначеЕсли  ВыбранноеЗначение="Выгрузка справочников" Тогда
		Режим=ВыбранноеЗначение;
		ФормаПользователиИмя=ОбработкаОбъект.ПолучитьФорму("ФормаСправочники");
		// Открываем нужную форму
		ОткрытьФорму(ФормаПользователиИмя);
		// Говорим, что при закрытии текущей формы, само приложение не закрывается 
		ФлагЗакрытия=Ложь;
		// Закрываем форму выбора
		ЭтаФорма.Закрыть();
	КонецЕсли
	
КонецПроцедуры

// Процедура обрабатывает нажатие кнопки "О Программе"
Процедура ОсновныеДействияФормыОПрограмме(Кнопка)
	// Открываем в модальном режиме форму, содержащую информацию о программе
	ФормаСохранения=ОбработкаОбъект.ПолучитьФорму("ФормаОПрограмме");
	Результат=ФормаСохранения.ОткрытьМодально();
КонецПроцедуры

// Процедура, выдающая подтверждение на закрытие приложения при закрытии формы.
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	// Проверяем, была ли нажата кнопка Назад (ФлагЗакрытия=Ложь) или пользователь закрывает форму
	Если ФлагЗакрытия тогда
		Режим1 = РежимДиалогаВопрос.ДаНет;
		Текст = "Закончить работу обработки?";
		Ответ = Вопрос(Текст, Режим1);
		// Если пользователь не подтвердил закрытие всего приложения, то прерываем процедуру закрытия
		Если Ответ = КодВозвратаДиалога.Нет Тогда
	    	Отказ=истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура, обрабатывает открытие формы
Процедура ПриОткрытии()
	// Устанавливаем по умолчанию, что при закрытии формы выдается запрос на закрытие приложения
	ФлагЗакрытия=Истина;
	// Находим, в регистрах бухгалтерии тот, который содержит проводки бух. учета (ищем в описании слово "бух") и сохраняем его имя.
	Для каждого РегистрБух  Из Метаданные.РегистрыБухгалтерии  Цикл
		Если  Найти(РегистрБух.Синоним, "проводок")>0 и  Найти(РегистрБух.Синоним, "бух")>0 Тогда
			РегистрПроводки=РегистрБух.Имя;
			Прервать;	
		КонецЕсли;
	КонецЦикла; 
	// Находим, в планах счетов тот, который содержит счета бух. учета (ищем в описании слово "бух")и сохраняем его имя.
	Для каждого План  Из Метаданные.ПланыСчетов  Цикл
		Если  Найти(План.Синоним, "бух")>0  Тогда
			ПланСчетовНазвание=План.Имя;
			Прервать;	
		КонецЕсли;
	КонецЦикла; 
 КонецПроцедуры

