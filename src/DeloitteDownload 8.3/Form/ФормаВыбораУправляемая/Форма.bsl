#Область ГлавнаяФорма

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Устанавливаем по умолчанию, что при закрытии формы выдается запрос на закрытие приложения
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ФлагЗакрытия=Истина;
	// Находим, в регистрах бухгалтерии тот, который содержит проводки бух. учета (ищем в описании слово "бух") и сохраняем его имя.
	Для каждого РегистрБух  Из Метаданные.РегистрыБухгалтерии  Цикл
		Если  Найти(РегистрБух.Синоним, "проводок")>0 и  Найти(РегистрБух.Синоним, "бух")>0 Тогда
			Объект.РегистрПроводки=РегистрБух.Имя;
			Прервать;	
		КонецЕсли;
	КонецЦикла; 
	// Находим, в планах счетов тот, который содержит счета бух. учета (ищем в описании слово "бух")и сохраняем его имя.
	Для каждого План  Из Метаданные.ПланыСчетов  Цикл
		Если  Найти(План.Синоним, "бух")>0  Тогда
			Объект.ПланСчетовНазвание=План.Имя;
			Прервать;	
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОПрограмме(Команда)

	ОткрытьФорму("ВнешняяОбработка.DeloitteDownload.Форма.ФормаОПрограммеУправляемая",,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ФлагЗакрытия тогда
		Отказ = истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемВопросЗавершение", ЭтотОбъект),"Закончить работу обработки?",РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопросЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ФлагЗакрытия = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузку(Команда)
	
	Если не ЗначениеЗаполнено(ВыборОперации) Тогда 
		
		// Если не был выбран ни один из режимов выгрузки, то  выдается сообщение
		ПоказатьПредупреждение(,"Не выбрана операция!");
		Возврат;
		
	ИначеЕсли (ВыборОперации="Выгрузка списка проводок") или (ВыборОперации="Выгрузка списка контрагентов") или (ВыборОперации="Выгрузка плана счетов") или (ВыборОперации="Выгрузка журнала регистрации") Тогда 
		
		// Если был выбран режим "Выгрузка списка проводок" или  "Выгрузка списка проводок" или "Выгрузка плана счетов",
		// то открывается общая форма для выгрузки
		Объект.Режим = ВыборОперации;
		СменитьСтраницу("ГруппаВыгрузить");
		//ОткрытьФорму("ВнешняяОбработка.DeloitteDownload.Форма.ФормаВыгрузкиУправляемая",,ЭтотОбъект);
		// Говорим, что при закрытии текущей формы, само приложение не закрывается 
		//ФлагЗакрытия=Ложь;
		//// Закрываем форму выбора
		//ЭтотОбъект.Закрыть();
		
	ИначеЕсли ВыборОперации = "Пользователи НСИ" Тогда 
		
		// Если был выбран режим выгрузки прав пользователей, то проверяем достаточность прав пользователя на выполнение операции
		Если не ПопыткаПолучитьПользователейСервер() Тогда
			ПоказатьПредупреждение(,"Недостаточно прав доступа! Необходимы административные права!");
			Возврат;	
		КонецЕсли;
		
		Объект.Режим = ВыборОперации;
		// Открываем нужную форму
		СменитьСтраницу("ГруппаПользователи");
		ФлагЗакрытия = Истина;

	ИначеЕсли ВыборОперации = "Выгрузка справочников" Тогда
		
		Объект.Режим = ВыборОперации;
		СменитьСтраницу("ГруппаСправочники");
		// Говорим, что при закрытии текущей формы, само приложение не закрывается 
		ФлагЗакрытия = Истина;
		
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция ПопыткаПолучитьПользователейСервер()
	
	Попытка
		Пользователи1=ПользователиИнформационнойБазы.ПолучитьПользователей();
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура СменитьСтраницу(ТекСтраница)
	
	ТекСтраница = Элементы.Найти(ТекСтраница);
	Если ТекСтраница <> Неопределено Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = ТекСтраница;
	Иначе
		Возврат;
	КонецЕсли;
	
	// Определяем по умолчанию что при закрытии формы выдается запрос на закрытие приложения.
	ФлагЗакрытия = Истина;
	// Обнуляем значение переменной, хранящей результаты запросов
	Объект.РезультатЗапроса = Неопределено;
	// Обнуляем значения всех полей для ввода
	Объект.ДатаНачала = Неопределено;
	Объект.ДатаКонца = Неопределено;
	Объект.Организация = Неопределено;
	КолЗаписейЗначТекст = 0;
	// Выводим в заголовок формы наименование текущего режима выгрузки (проводки/контрагенты/справочники)	
	ЭтотОбъект.Заголовок = Объект.Режим;
	
	Если Объект.Режим = "Выгрузка списка проводок"  Тогда
		
		Элементы.ГруппаТаблицы.ТекущаяСтраница = Элементы.стрТабПроводок;
		
		// Если выгружаем проводки, то делаем доступными поля для ввода дат и организации
		Элементы.ДатаНачала.Доступность = Истина;
		Элементы.ДатаКонца.Доступность = Истина;
		Элементы.Организация.Доступность = Истина;
		//Формируем список организаций для поля выбора
		списокорганизаций = ВернутьСписокОрганизаций();
		Если списокорганизаций.количество() = 0 Тогда
			Элементы.Организация.Доступность = Ложь;
		Иначе
			Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(списокорганизаций);
		КонецЕсли;
		//Ставим первый элемент сформированного списка значением по умолчанию для  поля выбора органзации
		объект.Организация = списокорганизаций[0];	
	ИначеЕсли  объект.Режим="Выгрузка списка контрагентов" или объект.Режим="Выгрузка журнала регистрации" Тогда
		// Если выгружаем контрагентов или журнал регистрации, то делаем доступными только поля для ввода дат
		Элементы.ДатаНачала.Доступность=Истина;
		Элементы.ДатаКонца.Доступность=Истина;
		Если объект.Режим="Выгрузка журнала регистрации" Тогда
			Элементы.Организация.Доступность=Истина;
			Элементы.ГруппаОтборОрганизация.Заголовок="Отбор по:" ;
			ВыборДанных=Новый СписокЗначений();
			ВыборДанных.Добавить("данным");
			ВыборДанных.Добавить("пользователям");
			ВыборДанных.Добавить("изменениям конфигурации");
			Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(ВыборДанных.ВыгрузитьЗначения());
			Объект.Организация = ВыборДанных[1];
			
			Элементы.ГруппаТаблицы.ТекущаяСтраница = Элементы.стрТабЖурналаПользователи;
			
		Иначе
			Элементы.ГруппаТаблицы.ТекущаяСтраница = Элементы.стрТабКонтрагенты;
			Элементы.Организация.Доступность=Ложь;
		КонецЕсли;
	Иначе
		//Если выгружаем не проводки и не контрагентов и не журнал регистрации, то делаем поля для ввода дат и организации недоступными 
		Элементы.ДатаНачала.Доступность=Ложь;
		Элементы.ДатаКонца.Доступность=Ложь;
		Элементы.Организация.Доступность=Ложь;
		
		Элементы.ГруппаТаблицы.ТекущаяСтраница = Элементы.стрТабПланСчетов;

	КонецЕсли;
	
	Если Объект.Режим = "Выгрузка справочников" Тогда
		
		ФлагЗакрытия=Истина;
		Элементы.ПолеВыбораСправочника.СписокВыбора.ЗагрузитьЗначения(ВернутьСписокСправочников());
		
	КонецЕсли;
	
	Если Объект.Режим = "Пользователи НСИ" и Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПользователи Тогда
		СформироватьРезПользователиКлиент();
	КонецЕсли;
	
	РезультатСформирован = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьРезПользователиКлиент()
	
	АдресТабДок = СформироватьРезПользователиСервер();
	
	Если АдресТабДок <> Неопределено Тогда
		табДок = ПолучитьИзВременногоХранилища(АдресТабДок);
		ТабДокПользователи = табДок;
	Иначе
		ТабДокПользователи = новый ТабличныйДокумент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьРезПользователиСервер()
	
	Адрес = Неопределено;
	ФлагЗакрытия=Истина;
	Таб1=Новый ТаблицаЗначений;
	Пользователи1=ПользователиИнформационнойБазы.ПолучитьПользователей();
	СписокСправочников=Новый СписокЗначений();
	Попытка
		СписокСправочников.Добавить(Метаданные.Справочники.Банки);
	Исключение
	КонецПопытки;
	Попытка
		СписокСправочников.Добавить(Метаданные.Справочники.БанковскиеСчета);
	Исключение
	КонецПопытки;
	Попытка
		СписокСправочников.Добавить(Метаданные.Справочники.ГруппыПользователей);
	Исключение
	КонецПопытки;
	Попытка
		СписокСправочников.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов);
	Исключение
	КонецПопытки;
    Попытка
		СписокСправочников.Добавить(Метаданные.Справочники.Контрагенты); 
	Исключение
	КонецПопытки;
	Попытка
		СписокСправочников.Добавить(Метаданные.Справочники.Номенклатура);
	Исключение
	КонецПопытки;	
	Попытка
		СписокСправочников.Добавить(Метаданные.Справочники.ОсновныеСредства);
	Исключение
	КонецПопытки;
	Попытка
		СписокСправочников.Добавить(Метаданные.Справочники.Пользователи);
	Исключение
	КонецПопытки;
	Попытка
		СписокСправочников.Добавить(Метаданные.Справочники.РасходыБудущихПериодов);
	Исключение
	КонецПопытки;	
 	СписокСправочников.СортироватьПоЗначению();	
  	Таб1.Колонки.Добавить("Пользователь",,"Пользователь",20);    	
	Для каждого Справ1 Из СписокСправочников Цикл
		Таб1.Колонки.Добавить(Справ1.Значение.Имя,,Справ1.Значение.Синоним,20);			
	КонецЦикла;              
	Для каждого Пользователь1  Из Пользователи1  Цикл
		Строка=Таб1.Добавить();
		Строка[0]=Пользователь1;
		НомАтр=1;
		ФлагЕстьПрава=Ложь;
		Для каждого Справ1 Из СписокСправочников Цикл
			Если ПравоДоступа("ИнтерактивноеДобавление",Справ1.Значение,Пользователь1) Тогда
				Строка[НомАтр]="Добавление "; 
				ФлагЕстьПрава=Истина;
			КонецЕсли;
			Если ПравоДоступа("Редактирование",Справ1.Значение,Пользователь1) Тогда
				Строка[НомАтр]=Строка(Строка[НомАтр])+"Изменение "; 
				ФлагЕстьПрава=Истина;
			КонецЕсли;
			Если ПравоДоступа("ИнтерактивноеУдаление",Справ1.Значение,Пользователь1) Тогда
				Строка[НомАтр]=Строка(Строка[НомАтр])+"Удаление ";
				ФлагЕстьПрава=Истина;
			КонецЕсли;
			НомАтр=НомАтр+1;	
		КонецЦикла; 
		Если ФлагЕстьПрава=Ложь Тогда
			Таб1.Удалить(Строка);
		КонецЕсли; 
	КонецЦикла; 	
	//ЭлементыФормы.ТабличноеПоле1.Значение=Таб1;
	//ЭлементыФормы.ТабличноеПоле1.СоздатьКолонки();
	//Колонки1=ЭлементыФормы.ТабличноеПоле1.Колонки;
	//НомАтр=0;
	//Для каждого Колонка1 Из Колонки1  Цикл
	//	Колонка1.Ширина=20;	
	//	Если НомАтр=0 Тогда
	//		Колонка1.ТекстШапки="Пользователь"
	//	Иначе
	//		Колонка1.ТекстШапки=СписокСправочников[НомАтр-1];
	//	КонецЕсли; 
	//	НомАтр=НомАтр+1
	//КонецЦикла;
	
	мРезЗапроса = Таб1;
	
	Если мРезЗапроса <> Неопределено Тогда
		
		ТабДок = новый ТабличныйДокумент;
		
		КоличествоКолонок = мРезЗапроса.Колонки.Количество();

		//Выборка = мРезЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);

        ДетальнаяСтрока = ТабДок.ПолучитьОбласть(1, , 1, );
		//ОбластьОбщихИтогов = ТабДок.ПолучитьОбласть(1, , 1, );
		//ОбластьОбщихИтогов.Область().Шрифт = Новый Шрифт(ОбластьОбщихИтогов.Область().Шрифт, , , Истина, , ,);
		//ОбластьИерархическихЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		//ОбластьИерархическихЗаписей.Область().Шрифт = Новый Шрифт(ОбластьИерархическихЗаписей.Область().Шрифт, , , Истина, , ,);
		//ОбластьГрупповыхЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		//ОбластьГрупповыхЗаписей.Область().Шрифт = Новый Шрифт(ОбластьГрупповыхЗаписей.Область().Шрифт, , , Истина, , ,);
		ОбластьЗаголовка = ТабДок.ПолучитьОбласть(1, , 1, );
		
		Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
			Область = ОбластьЗаголовка.Область(1, ТекущееПоле + 1);
			Область.Текст = мРезЗапроса.Колонки[ТекущееПоле].Заголовок;
            Область.ШиринаКолонки = мРезЗапроса.Колонки[ТекущееПоле].Ширина;
		КонецЦикла;
		
		ТабДок.Вывести(ОбластьЗаголовка);
		ОбластьЗаголовка = ТабДок.Область(1, 1, 1, КоличествоКолонок);
		
		ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , , Истина, , ,);
		ОбластьЗаголовка.ЦветФона = WebЦвета.ЦветокБелый;
		ОбластьЗаголовка.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

		//ТабДок.НачатьАвтогруппировкуСтрок();
		Для каждого Стр из мРезЗапроса Цикл
		//	Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
		//		ИсходнаяСтрока = ОбластьГрупповыхЗаписей;
		//	ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда 
		//		ИсходнаяСтрока = ОбластьИерархическихЗаписей;
		//	ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда 
		//		ИсходнаяСтрока = ОбластьОбщихИтогов;
		//	Иначе
				ИсходнаяСтрока = ДетальнаяСтрока;
		//	КонецЕсли;
		//		
			Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
				Область = ИсходнаяСтрока.Область(1, ТекущееПоле + 1);
				Область.Текст = Стр[ТекущееПоле];
			КонецЦикла;
			ТабДок.Вывести(ИсходнаяСтрока);
		КонецЦикла;
		
		//ТабДок.ЗакончитьАвтогруппировкуСтрок();
		Адрес = ПоместитьВоВременноеХранилище(ТабДок);
		
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьСписокСправочников()
	
	СправочникиСписок=Новый массив;
	Для каждого СправочникСсылка Из Метаданные.Справочники Цикл
		СправочникиСписок.Добавить(СправочникСсылка.Имя);
	КонецЦикла; 	
	
	Возврат СправочникиСписок;
	
Конецфункции

&НаСервереБезКонтекста
Функция ВернутьСписокОрганизаций()
	
	//Формируем список организаций для поля выбора
	ЗапросСправ = Новый Запрос();
	ЗапросСправ.Текст="ВЫБРАТЬ
	| Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	СписокОрганизаций = новый Массив;
	
	Попытка
		СписокОрганизаций = ЗапросСправ.Выполнить().Выгрузить().ВыгрузитьКолонку("Наименование");
		Возврат СписокОрганизаций;
	Исключение
		// Если не удается выполнить запрос, то делаем поле для ввода организации недоступным
		Возврат СписокОрганизаций;	
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область Выгрузить
&НаКлиенте
Процедура ВывестиСписок(Команда)
	
	// В зависимости от того, что записано в переменной Режим, выполняем соответствующие процедуры, описанные выше
	Если объект.Режим="Выгрузка списка проводок" Тогда
		ВывестиСписокПроводокКлиент();
	ИначеЕсли объект.Режим="Выгрузка списка контрагентов" Тогда
	    ВывестиСписокКонтрагентовКлиент();
	ИначеЕсли объект.Режим="Выгрузка журнала регистрации" Тогда
		ВывестиЖурналРегКлиент();
	Иначе
		ВывестиПланСчетовКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиЖурналРегКлиент()
	
	Если (Не ПроверкаЗаполненияКонтрагенты(Объект.ДатаНачала,Объект.ДатаКонца)) или(НЕ ПроверкаДат(Объект.ДатаНачала,Объект.ДатаКонца))  Тогда
		Возврат;	
	КонецЕсли;
	
	КолЗаписейЗначТекст = ВывестиЖурналРегСервер();
	Элементы.ТабЖурналаДанныеДата.Заголовок = "Дата"+"|"+Строка(Формат(Объект.ДатаНачала,"ДФ=""ггггММдд"""))+"|"+Строка(Формат(Объект.ДатаКонца,"ДФ=""ггггММдд"""));
	Элементы.ТабЖурналаПользователиДата.Заголовок = "Дата"+"|"+Строка(Формат(Объект.ДатаНачала,"ДФ=""ггггММдд"""))+"|"+Строка(Формат(Объект.ДатаКонца,"ДФ=""ггггММдд"""));
	Элементы.ТабЖурналаИзмененияДата.Заголовок = "Дата"+"|"+Строка(Формат(Объект.ДатаНачала,"ДФ=""ггггММдд"""))+"|"+Строка(Формат(Объект.ДатаКонца,"ДФ=""ггггММдд"""));
	РезультатСформирован = Истина;
	
КонецПроцедуры

&НаСервере
Функция ВывестиЖурналРегСервер()
	
	РезультатЗапроса=Новый ТаблицаЗначений();
	обработкаобъект = РеквизитФормыВЗначение("Объект");
	РезультатЗапроса=обработкаобъект.СформироватьЖурналыДляВыгрузки();
	Если РезультатЗапроса=Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	если Объект.организация = "данным" Тогда
		ТабЖурналаДанные.Загрузить(РезультатЗапроса);
	ИначеЕсли Объект.организация = "пользователям" Тогда
		ТабЖурналаПользователи.Загрузить(РезультатЗапроса);
	ИначеЕсли Объект.организация = "изменениям конфигурации" Тогда
		ТабЖурналаИзменения.Загрузить(РезультатЗапроса);
	КонецЕсли;
	
	Возврат РезультатЗапроса.количество();
	
КонецФункции

//Процедура выводит список проводок в таблицу на форме
&НаКлиенте
Процедура ВывестиСписокПроводокКлиент()
	
	// Проверяем заполненность полей с датами и организацией. Если не заполнены, то прерываем процедуру
 	Если (Не ПроверкаЗаполнения(Объект.ДатаНачала, "Дата начала периода")) или (Не ПроверкаЗаполнения(Объект.ДатаКонца, "Дата конца периода"))или (НЕ ПроверкаДат(Объект.ДатаНачала,Объект.ДатаКонца)) или (Элементы.Организация.Доступность и (Не ПроверкаЗаполнения(Объект.Организация, "Организация"))) Тогда
    	Возврат;
	КонецЕсли;
	
	ВывестиСписокПроводокСервер();
	
	//// Выводим результат на форму
	//ЭлементыФормы.ТабличноеПоле1.Значение=Результат1;
	//ЭлементыФормы.ТабличноеПоле1.СоздатьКолонки();
	//// Указываем формат дат
	//ЭлементыФормы.ТабличноеПоле1.Колонки.Период.Формат="ДФ=""дд.ММ.гггг""";
	//// Указываем формат суммы, если это поле было выгружено
	//Попытка
	//	ЭлементыФормы.ТабличноеПоле1.Колонки.Сумма.Формат="ЧРД="".""; ЧРГ="" """;
	//Исключение
	//КонецПопытки;
	// Выводим в подпись под табличонй частью количество проводок
	КолЗаписейЗначТекст=ТабПроводок.Количество();
	Элементы.ТабПроводокИдентификаторПроводки.Заголовок="ИдентификаторПроводки|"+Строка(Формат(Объект.ДатаНачала,"ДФ=""ггггММдд"""))+"|"+Строка(Формат(Объект.ДатаКонца,"ДФ=""ггггММдд"""));
	РезультатСформирован = Истина;
	//
КонецПроцедуры

&НаСервере
Процедура ВывестиСписокПроводокСервер()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СписокПолей = Новый Массив();
	ОбработкаОбъект.СписокПолей = ОбработкаОбъект.СписокПолейПроводки();
	// Если в переменной с результатом запроса ничего нет, то выполняем запрос
	Если Объект.РезультатЗапроса=Неопределено Тогда
		Запрос1 = Новый Запрос();
		// Формируем текст запроса. Функция описана в Модуле объекта.
		Запрос1.Текст=ОбработкаОбъект.ТекстЗапросаПроводки();
		Запрос1.УстановитьПараметр("ДатаНачала",Объект.ДатаНачала);
		Запрос1.УстановитьПараметр("ДатаКонца",Объект.ДатаКонца);
		Запрос1.УстановитьПараметр("Организация",Объект.Организация);
		РезультатЗапроса=Запрос1.Выполнить();
	КонецЕсли;
	Результат1=РезультатЗапроса.Выгрузить();
	//Вставляем колонки, в которых в итоге будут нужные сведения
	Результат1.Колонки.Вставить(2,"ИдентификаторПроводки");
	Результат1.Колонки.Вставить(8,"Пользователь");
	Результат1.Колонки.Вставить(10,"Документ");
	Результат1.Колонки.Добавить("Содержание1");
	// Флаг для выгрузки пользователей из журнала регистрации. Если он равен 2, значит достаточно прав для выгрузки из журнала регистрации.
	Объект.ФлагПользователи=2;
	// Формируем журналы с событиями из журнала регистрации. Процедура вызывается из Модуля объекта.
	ОбработкаОбъект.СФормироватьЖурналы(); 
	// Если достаточно прав для выгрузки пользователей
	Если Объект.ФлагПользователи=2 Тогда
		Для каждого СтрокаТабл  Из Результат1 Цикл
			// Формируем идентификатор проводки
			СтрокаТабл["ИдентификаторПроводки"]= СтрокаТабл["РегистраторНомер"] +Строка(СтрокаТабл["НомерСтроки"]);
			Отбор=Новый Структура();
			Отбор.Вставить("Данные", СтрокаТабл["Регистратор"]);
			// Ищем в журнале сведения по данному регистратору. Записывам пользователя, который произвел действия с регистратором.
			СтрокаТабл["Пользователь"]=ОбработкаОбъект.НайтиВЖурналеРег(Отбор); 
			//Выделяем из строки с названием регистратора его тип.
			СтрокаТабл["Документ"]=Лев(СтрокаТабл["Документ1"],Найти(СтрокаТабл["Документ1"],СтрокаТабл["РегистраторНомер"])-1);
			// Заменяем в строке с содержанием перевод строки на пробел
			СтрокаТабл["Содержание1"]=СтрЗаменить(СтрокаТабл["Содержание"], Символы.ПС, " ");	
		КонецЦикла; 
	// Если недостаточно прав для выгрузки пользователей и выгрузка продолжается
	ИначеЕсли Объект.ФлагПользователи=1 Тогда 	
		Для каждого СтрокаТабл  Из Результат1 Цикл
			// Формируем идентификатор проводки
			СтрокаТабл["ИдентификаторПроводки"]= СтрокаТабл["РегистраторНомер"] +Строка(СтрокаТабл["НомерСтроки"]); 
			//Выделяем из строки с названием регистратора его тип
			СтрокаТабл["Документ"]=Лев(СтрокаТабл["Документ1"],Найти(СтрокаТабл["Документ1"],СтрокаТабл["РегистраторНомер"])-1);
			// Заменяем в строке с содержанием перевод строки на пробел
			СтрокаТабл["Содержание1"]=СтрЗаменить(СтрокаТабл["Содержание"], Символы.ПС, " ");
		КонецЦикла;
	// Если недостаточно прав для выгрузки пользователей и выгрузка прервана, то прекращаем выгрузку.
	Иначе
		Возврат;
	КонецЕсли; 
	// Удаляем лишние поля
	//Результат1.Колонки.Удалить(0);
	//Результат1.Колонки.Удалить("Регистратор");
	//Результат1.Колонки.Удалить("НомерСтроки");
	//Результат1.Колонки.Удалить("Документ1");
	//Результат1.Колонки.Удалить("Содержание");
	// Добавляем в заголовок первого поля даты, за которые были выгружены проводки
	Результат1.Колонки[0].Заголовок="ИдентификаторПроводки|"+Строка(Формат(Объект.ДатаНачала,"ДФ=""ггггММдд"""))+"|"+Строка(Формат(Объект.ДатаКонца,"ДФ=""ггггММдд"""));
	Результат1.Колонки.Содержание1.Заголовок="Содержание";
	
	ТабПроводок.Очистить();
	для каждого стр из Результат1 Цикл
		НовСтр = ТабПроводок.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, стр);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура выводит план счетов в таблицу на форме
Процедура ВывестиПланСчетовКлиент()
	
	ВывестиПланСчетовСервер();
	
	//ЭлементыФормы.ТабличноеПоле1.Значение=Результат1;
	//ЭлементыФормы.ТабличноеПоле1.СоздатьКолонки();
	КолЗаписейЗначТекст=ТабПланСчетов.Количество();
	РезультатСформирован = Истина;

КонецПроцедуры

&НаСервере
Процедура ВывестиПланСчетовСервер()
	
	// Если запрос не выполнялся
	Если Объект.РезультатЗапроса=Неопределено Тогда
		
		Запрос1=Новый Запрос();
		// Формируем текст запроса. Функция описана в Модуле объекта.
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		Запрос1.Текст=ОбработкаОбъект.ТекстЗапросаПланСчетов();
		РезультатЗапроса=Запрос1.Выполнить();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ТабПланСчетов.Очистить();
	
	Пока Выборка.Следующий() Цикл
		новСтр = ТабПланСчетов.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСписокКонтрагентовКлиент()
	
	// Проверяем заполненность полей с датами и корректность ввода дат.
	Если (Не ПроверкаЗаполненияКонтрагенты(Объект.ДатаНачала,Объект.ДатаКонца)) или(НЕ ПроверкаДат(Объект.ДатаНачала,Объект.ДатаКонца))  Тогда
    	Возврат;	
	КонецЕсли;
	// Проверяем правильно ли назван справочник Контрагенты. Процедура описана в Модуле объекта.
	НазваниеСправочникаКонтрагентов();
	Если Объект.НазваниеСправКонтрагенты = Неопределено тогда
		Возврат;
	КонецЕсли;
	// Если не введено корректное название справочника, то выполнение процедуры прерывается
	Если Объект.НазваниеСправКонтрагенты="" Тогда
		Возврат;
	КонецЕсли;
	
	Если не ПроверитьКонтрагентов() Тогда
		Возврат	
	КонецЕсли;
	
	ВывестиСписокКонтрагентовСервер();
	
	// Добавляем в колонку с идентификатором даты, определенные при выгрузке.
	Элементы.ТабКонтрагентыИдентификатор.Заголовок="Идентификатор|"+Строка(Формат(Объект.ДатаНачала,"ДФ=""ггггММдд"""))+"|"+Строка(Формат(Объект.ДатаКонца,"ДФ=""ггггММдд"""));
	//// Выводим количество записей под табличную часть
	КолЗаписейЗначТекст = ТабКонтрагенты.Количество();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗаполненияКонтрагенты(ДатаНачала, ДатаКонца, Ответ = Неопределено)
	
	Если ДатаНачала='00010101' и ДатаКонца='00010101' Тогда
		
		Если Ответ <> Неопределено Тогда
			Возврат Ответ;	
		КонецЕсли;
		
	  //  Текст = "Для сокращения времени выгрузки рекомендуется ввести даты начала и конца рассматриваемого периода."+Символы.ПС+
	  //"Для возврата и ввода дат нажмите ""Отмена""."+Символы.ПС+
	  //  "Для продолжения процесса выгрузки нажмите ""ОК"".";

	  //  ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаПроверкаКонтрагента", ЭтотОбъект),Текст,РежимДиалогаВопрос.ОКОтмена);
		Возврат Истина;
	Иначе
		Если (Не ПроверкаЗаполнения(ДатаНачала, "ДатаНачала")) или (Не ПроверкаЗаполнения(ДатаКонца, "ДатаКонца")) Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеВопросаПроверкаКонтрагента(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		ПроверкаЗаполненияКонтрагенты(Объект.ДатаНачала, Объект.ДатаКонца, Ложь)
	Иначе
		ПроверкаЗаполненияКонтрагенты(Объект.ДатаНачала, Объект.ДатаКонца, Истина)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСписокКонтрагентовСервер()
	
	// Если есть название справочника контрагентов, то проверяем наличие необходимых полей. Функция СписокПолейКонтрагенты() вызывается из Модуля объекта
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	обработкаобъект.СписокПолей=Новый Массив();
	обработкаобъект.СписокПолей=СписокПолейКонтрагенты();
	// Если запрос не выполнялся
	Если Объект.РезультатЗапроса=Неопределено Тогда
		Запрос1=Новый Запрос();
		// Формируем параметры для запроса. 
		// ЮрАдресКонтрагента, ФактАдресКонтрагента и ТелефонКонтрагента - поля, которые отображаются в карточке контрагента.
		ЮАдр=Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента.Наименование;
		ФАдр=Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента.Наименование;
		Тел=Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.Наименование;
		Факс=обработкаобъект.ПолеФаксКонтрагента();
		// Формируем текст запроса. Функция описана в Модуле объекта.
		Запрос1.Текст=обработкаобъект.ТекстЗапросаКонтрагенты(Юадр,Фадр,Тел,Факс,Объект.ДатаНачала,Объект.ДатаКонца);
		Запрос1.УстановитьПараметр("ЮАдр",ЮАдр);
		Запрос1.УстановитьПараметр("ФАдр",Фадр);
		Запрос1.УстановитьПараметр("Тел",Тел);
		Запрос1.УстановитьПараметр("Факс",Факс);
		Запрос1.УстановитьПараметр("ДатаНачала",Объект.ДатаНачала);
		Запрос1.УстановитьПараметр("ДатаКонца",Объект.ДатаКонца);
		РезультатЗапроса=Запрос1.Выполнить();
	КонецЕсли;
	Результат2=РезультатЗапроса.Выгрузить(); 
	Результат1=Новый ТаблицаЗначений();
	// Если какие-то из колонок с контактной информацией полностью пустые, то удаляем такие колонки. Функция описана в Модуле объекта.
	Результат1=ОбработкаОбъект.УдалитьПустыеКолонки(Результат2);
	Объект.НазвКИ = обработкаобъект.НазвКИ;
	// Ставим флаг, определяющий, выгружено ли НаименованиеПолное
	ЕстьНаимПолное=Результат1.Колонки.Найти("НаименованиеПолное1")<>Неопределено;	
	// Определяем, сколько полей не было выгружено
	РазницаПолей=9-Результат1.Колонки.Индекс(Результат1.Колонки.Найти("ЮрАдрес"));
	// Если НаименованиеПолное выгружено, то вставляем колонку, в котором будет храниться значение
	Если ЕстьНаимПолное Тогда 	
		Результат1.Колонки.Вставить(3,"НаименованиеПолное");
	// В противном случае увеличиваем разницу полей, так как еще одна колонка для полного наименования не была добавлена	
	Иначе
		РазницаПолей=РазницаПолей+1;
	КонецЕсли;
	// Вставляем колонки, в которых будет нужная инфорация.
	Результат1.Колонки.Вставить(7-РазницаПолей,"БанковскиеСчета");
	Результат1.Колонки.Вставить(11-РазницаПолей,"ЮридическийАдрес");
	Результат1.Колонки.Вставить(12-РазницаПолей,"ФактическийАдрес");
	Результат1.Колонки.Вставить(13-РазницаПолей,"Телефон");
	Результат1.Колонки.Вставить(14-РазницаПолей,"Факс");
	Результат1.Колонки.Вставить(15-РазницаПолей,"КИ");
	// Формируем нормальный заголовок колонки с КИ. Заменяем разделители полей и слов, которые были сформированы в запросе.
	Результат1.Колонки[15-РазницаПолей].Заголовок=СтрЗаменить(СтрЗаменить(Объект.НазвКИ, "_987654321","|"),"_"," ");
	КолвоПолей=Результат1.Колонки.Количество();
	// Cчитаем кол-во полей с КИ (общее количество полей минус кол-во полей без КИ.)
	КолвоПолейКИ=Результат1.Колонки.Количество()-(19-РазницаПолей);
	// Формируем выборку с банковскими счетами контрагентов. Функция описана в Модуле объекта.
	БанкСчета=обработкаобъект.БанкСчетаКонтрагентов();
	// Перебираем всех контрагентов
	Для каждого СтрокаТабл  Из Результат1 Цикл
		СтрокаСчета="";
		СтрукПоиск=Новый Структура();
		// Формируем критерий для поиска в выборке банковских счетов контрагентов: ищем по идентификатору 
		СтрукПоиск.Вставить("Идентификатор", СтрокаТабл["Идентификатор"]);
		// Если есть банковские счета для данного контрагента, то добавляем их в строку с раздедителем
		Пока БанкСчета.НайтиСледующий(СтрукПоиск) Цикл
			СтрокаСчета=СтрокаСчета+БанкСчета.НомерСчета+"|";	
		КонецЦикла;	
		// Убираем последний, лишний разделитель
		СтрокаСчета=Лев(СтрокаСчета,СтрДлина(СтрокаСчета)-1);
		СтрокаТабл["БанковскиеСчета"]=СтрокаСчета;
		// Если выгружено НаименованиеПолное, то записываем его значение без лишних пробелов справа
		Если ЕстьНаимПолное Тогда
			СтрокаТабл["НаименованиеПолное"]=СокрП(СтрокаТабл["НаименованиеПолное1"]);		
		КонецЕсли; 
		// Записываем значения юридического адреса, фактического адреса и телефона без лишних пробелов справа и без символов переноса строки.
		СтрокаТабл["ЮридическийАдрес"]=СтрЗаменить(СокрП(СтрокаТабл["ЮрАдрес"]),Символы.ПС, " ");
		СтрокаТабл["ФактическийАдрес"]=СтрЗаменить(СокрП(СтрокаТабл["ФактАдрес"]),Символы.ПС, " ");
		СтрокаТабл["Телефон"]=СтрЗаменить(СокрП(СтрокаТабл["Тел"]),Символы.ПС, " ");
		СтрокаТабл["Факс"]=СтрЗаменить(СокрП(СтрокаТабл["Факс1"]),Символы.ПС, " ");
		// Ставим счетчик на начало полей с КИ
		Счетчик=19-РазницаПолей;
		СтрокаКИ="";
		// Перебираем все поля с КИ (начиная с счетчика и до конца), заменяем перевод строки на пробел и записываем в строку с разделителем 
		Пока Счетчик<КолвоПолей Цикл
			СтрокаКИ=СтрокаКИ+СтрЗаменить(СтрокаТабл[Счетчик],Символы.ПС, " ")+"|";
			Счетчик=Счетчик+1;
		КонецЦикла;
		// Записываем в созданное поле для КИ сформированную строку
		СтрокаТабл[15-РазницаПолей]=СтрокаКИ;
	КонецЦикла; 
	// Если было выгружено наименование полное,то удаляем колонку и указываем, что будет удалено всего 5 колонок
	Если ЕстьНаимПолное Тогда
		Результат1.Колонки.Удалить("НаименованиеПолное1");
		КолвоУдалПолей=5;
	// В противном случае возвращаем разницу кол-ва полей к исходному значению и указываем, что будет удалено только 4 колонки	
	Иначе
		РазницаПолей=РазницаПолей-1;
		КолвоУдалПолей=4;
	КонецЕсли;
	// Удаляем лишние колонки
	Результат1.Колонки.Удалить("ЮрАдрес");
	Результат1.Колонки.Удалить("ФактАдрес");
	Результат1.Колонки.Удалить("Тел");
	Результат1.Колонки.Удалить("Факс1");
	// Ставим счетчик на начало полей с КИ
	Счетчик=15-РазницаПолей;
	// Удаляем поля с КИ.
	Пока Счетчик<КолвоПолей-КолвоУдалПолей Цикл
		Результат1.Колонки.Удалить(15-РазницаПолей);
		Счетчик=Счетчик+1;
	КонецЦикла;
	
	ТабКонтрагенты.Загрузить(Результат1);
	
КонецПроцедуры

&НаКлиенте
Процедура НазваниеСправочникаКонтрагентов() экспорт
	Если НетСправочникаКонтрагенты()Тогда
		ОткрытьФорму("ВнешняяОбработка.DeloitteDownload.Форма.ФормаПроверкаСправКонтрагентыУправляемая",,,,,,Новый ОписаниеОповещения("ПослеПроверкиСправКонтрагенты",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Объект.НазваниеСправКонтрагенты="Контрагенты";
	КонецЕсли; 	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НетСправочникаКонтрагенты()
	Возврат Метаданные.Справочники.Найти("Контрагенты")=Неопределено;	
КонецФункции

&НаКлиенте
Процедура ПослеПроверкиСправКонтрагенты(Результат,ДопПараметры) Экспорт

	Объект.НазваниеСправКонтрагенты = Результат;	
	
КонецПроцедуры

&НаКлиенте
Функция СписокПолейПроводки() экспорт 
	РеквизитыСписок=Новый Массив();
	ОбработкаОбъект = реквизитформыВЗначение("Объект");
	РеквизитыСписок=ОбработкаОбъект.СформироватьРеквизитыРегистра();
	РеквизитыДляПроверки=Новый Массив();
	РеквизитыДляПроверки.Добавить("Сумма");
	РеквизитыДляПроверки.Добавить("Организация");
	РеквизитыДляПроверки.Добавить("Содержание");
	Счет=0;
	Для каждого РеквизитДляПроверки Из РеквизитыДляПроверки  Цикл
		Если РеквизитыСписок.Найти(РеквизитДляПроверки)=Неопределено Тогда
			РеквизитДляПроверкиОбщ=РеквизитДляПроверки;
			НазваниеСправКонтрагенты=Неопределено;
			ФормаРек=ПолучитьФорму("ФормаПроверкаРеквизитов");
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ОткрытьФормуМодально(ФормаРек);
			#КонецЕсли
			Если РеквизитДляПроверкиОбщ<>Неопределено Тогда
				РеквизитыДляПроверки[Счет]=РеквизитДляПроверкиОбщ;
			Иначе
				РеквизитыДляПроверки[Счет]=Неопределено;
			КонецЕсли; 
		КонецЕсли;
		Счет=Счет+1;
	КонецЦикла; 
	Возврат РеквизитыДляПроверки;
КонецФункции

&НаСервере
Функция СписокПолейКонтрагенты()
	
	РеквизитыСписок=Новый Массив();
	РеквизитыСписок = СформироватьРеквизитыКонтрагентов(Объект.НазваниеСправКонтрагенты);
	
	//Ищем замену
	для каждого Реквизит из РеквизитыСписок Цикл
		
		стрПоиска = ТаблицаСоответствияПолей.НайтиСтроки(Новый Структура("СтароеПоле",Реквизит));
		
		Если стрПоиска.Количество() <> 0 Тогда
			Если стрПоиска[0].НовоеПоле <> Реквизит Тогда
				Реквизит = стрПоиска[0].НовоеПоле;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСоответствияПолей.Выгрузить(,"НовоеПоле").ВыгрузитьКолонку("НовоеПоле");
	
КонецФункции

&НаКлиенте
Процедура ТекстФайл(Команда)
	
	Если Объект.Режим="Выгрузка списка проводок" Тогда
		Если (Не ПроверкаЗаполнения(Объект.ДатаНачала, "Дата начала периода")) или (Не ПроверкаЗаполнения(Объект.ДатаКонца, "Дата конца периода"))или (НЕ ПроверкаДат(Объект.ДатаНачала,Объект.ДатаКонца)) или (Элементы.Организация.Доступность и (Не ПроверкаЗаполнения(Объект.Организация, "Организация"))) Тогда
    		Возврат;
		КонецЕсли;
		//СписокПолей=Новый Массив();
		//СписокПолей=СписокПолейПроводки();
	ИначеЕсли Объект.Режим="Выгрузка списка контрагентов" Тогда
		Если (Не ПроверкаЗаполненияКонтрагенты(Объект.ДатаНачала,Объект.ДатаКонца)) или(НЕ ПроверкаДат(Объект.ДатаНачала,Объект.ДатаКонца))  Тогда
	    	Возврат;	
		КонецЕсли;
		НазваниеСправочникаКонтрагентов();
		Если Объект.НазваниеСправКонтрагенты="" Тогда
			Возврат;
		КонецЕсли;
		
		Если не ПроверитьКонтрагентов() Тогда
			Возврат;
		КонецЕсли;
		
		СписокПолей=Новый Массив();
		СписокПолей=СписокПолейКонтрагенты();	
	КонецЕсли;
	
	ОткрытьФорму("ВнешняяОбработка.DeloitteDownload.Форма.ФормаТекстФайлУправляемая",,,,,,Новый ОписаниеОповещения("ПослеЗакрытияФормыСохранить",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСохранить(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);	
		Диалог.Фильтр = "Текстовый файл (*.txt)|*.txt";
		
		Диалог.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла", ЭтотОбъект, Результат));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура послеВыбораФайла(выбранныеФайлы, ДопПараметры) Экспорт
	
	Если выбранныеФайлы <> Неопределено Тогда
		СохранитьФайлСервер(выбранныеФайлы[0],ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьФайлСервер(ИмяФайла, ДопПараметры)
	
	ВремяНачала=ТекущаяДата();
	обработкаобъект = РеквизитФормыВЗначение("Объект");
	
	Если не РезультатСформирован Тогда
		Запрос1=Новый Запрос();
		Если Объект.Режим="Выгрузка списка проводок" Тогда
			Запрос1.Текст=обработкаобъект.ТекстЗапросаПроводки();
			Запрос1.УстановитьПараметр("ДатаНачала",Объект.ДатаНачала);
			Запрос1.УстановитьПараметр("ДатаКонца",Объект.ДатаКонца);
			Запрос1.УстановитьПараметр("Организация",Объект.Организация);
		ИначеЕсли Объект.Режим="Выгрузка списка контрагентов" Тогда
			ЮАдр=Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента.Наименование;
			ФАдр=Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента.Наименование;
			Тел=Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.Наименование;
			Факс=обработкаобъект.ПолеФаксКонтрагента();
			обработкаобъект.СписокПолей=Новый Массив();
			обработкаобъект.СписокПолей=СписокПолейКонтрагенты();
			Запрос1.Текст=обработкаобъект.ТекстЗапросаКонтрагенты(Юадр,Фадр,Тел,Факс,Объект.ДатаНачала, Объект.ДатаКонца);
			Запрос1.УстановитьПараметр("ЮАдр",ЮАдр);
			Запрос1.УстановитьПараметр("ФАдр",Фадр);
			Запрос1.УстановитьПараметр("Тел",Тел);
			Запрос1.УстановитьПараметр("Факс",Факс);
			Запрос1.УстановитьПараметр("ДатаНачала",Объект.ДатаНачала);
			Запрос1.УстановитьПараметр("ДатаКонца",Объект.ДатаКонца);
		ИначеЕсли Объект.Режим="Выгрузка плана счетов" Тогда
			Запрос1.Текст=обработкаобъект.ТекстЗапросаПланСчетов();
		ИначеЕсли Объект.Режим="Выгрузка журнала регистрации" Тогда
			РезультатЗапроса=Новый ТаблицаЗначений();
			РезультатЗапроса=обработкаобъект.СформироватьЖурналыДляВыгрузки();
			Если РезультатЗапроса=Неопределено Тогда
				Возврат;
			КонецЕсли;
			результатДок = РезультатЗапроса.Скопировать();
		КонецЕсли; 
		
		Если Объект.Режим <> "Выгрузка справочников" Тогда
			Попытка
				РезультатЗапроса=Запрос1.Выполнить();
				результатДок = РезультатЗапроса.Выгрузить();
			Исключение
				Если Объект.Режим<>"Выгрузка журнала регистрации" Тогда
					сообщить("При выгрузке произошла ошибка!");
					Возврат;
				КонецЕсли;	
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		Если Объект.Режим = "Выгрузка списка проводок" Тогда
			РезультатДок = ТабПроводок.Выгрузить();
		ИначеЕсли Объект.Режим = "Выгрузка плана счетов"  Тогда
			РезультатДок = ТабПланСчетов.Выгрузить();
		ИначеЕсли Объект.Режим = "Выгрузка журнала регистрации" Тогда
			Если объект.Организация = "данным" Тогда
				результатДок = ТабЖурналаДанные.Выгрузить();	
			ИначеЕсли объект.Организация = "пользователям" Тогда
				результатДок = ТабЖурналаПользователи.Выгрузить();	
			ИначеЕсли объект.Организация = "изменениям конфигурации" Тогда
				результатДок = ТабЖурналаИзменения.Выгрузить();	
			КонецЕсли;
			КолонкаДата = результатДок.Колонки.Найти("Дата");
			Если КолонкаДата <> Неопределено Тогда
				КолонкаДата.Заголовок = "Дата"+"|"+Строка(Формат(Объект.ДатаНачала,"ДФ=""ггггММдд"""))+"|"+Строка(Формат(Объект.ДатаКонца,"ДФ=""ггггММдд"""));
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
	Если Объект.Режим = "Выгрузка справочников" Тогда
		Запрос1=Новый Запрос();
		Запрос1.Текст=обработкаобъект.ТекстЗапросаСправочники(ПолеВыбораСправочника, ПолеВыбораСортировки,мОтмеченныеРеквизиты.ВыгрузитьЗначения());
		Попытка
			РезультатЗапроса= Запрос1.Выполнить();
		Исключение
			ТекстОшибки=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Если Найти(ТекстОшибки,"Недопустимое поле для упорядочивания")<>0 Тогда
				Сообщить("Невозможно сортировать список по выбранному реквизиту."+Символы.ПС+"Выберите другой реквизит для сортировки."); 
			КонецЕсли;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	///!!!!!!!!!!!
	//Если Объект.Режим<>"Выгрузка журнала регистрации" тогда
	//	РезультатДок = РезультатЗапроса.Выбрать();
	//КонецЕсли;
	
	Текст = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	Если Объект.Режим="Выгрузка списка проводок" Тогда
		ФайлПроводки(РезультатДок,Текст, ДопПараметры.ТекстИнд, ДопПараметры.Разделитель);
	ИначеЕсли Объект.Режим="Выгрузка списка контрагентов" Тогда	
		РезультатДок1 = результатДок.Скопировать();
		РезультатДок=Новый ТаблицаЗначений();
		РезультатДок=обработкаобъект.УдалитьПустыеКолонки(РезультатДок1);
		Объект.НазвКИ = обработкаобъект.НазвКИ;
		ФайлКонтрагенты(РезультатДок, Текст, ДопПараметры.ТекстИнд, ДопПараметры.Разделитель);
		Объект.ФлагПользователи=1;
	ИначеЕсли Объект.Режим="Выгрузка плана счетов"  Тогда
		ФайлПланСчетов(РезультатДок, Текст, ДопПараметры.ТекстИнд, ДопПараметры.Разделитель);
		Объект.ФлагПользователи=1;
	ИначеЕсли Объект.Режим="Выгрузка журнала регистрации"  Тогда
		//РезультатДок=Новый ТаблицаЗначений();
		//РезультатДок=РезультатЗапроса;
		ФайлЖурРег(РезультатДок, Текст, ДопПараметры.ТекстИнд, ДопПараметры.Разделитель);
		Объект.ФлагПользователи=1;
	Иначе 
		РезультатДок = РезультатЗапроса.Выгрузить();
		ФайлСправочники(РезультатДок, Текст, ДопПараметры.ТекстИнд, ДопПараметры.Разделитель);	
	КонецЕсли; 
	Текст.Закрыть();      
	Если Объект.ФлагПользователи<>0 Тогда
		ВремяКонца=ТекущаяДата();
		ВремяСекунды=ВремяКонца-ВремяНачала;
		ВремяМинуты=Цел(ВремяСекунды/60);
		ВремяЧасы=Цел(ВремяМинуты/60);
		ВремяСекунды=ВремяСекунды-ВремяЧасы*60*60-ВремяМинуты*60;
		СтрокаЗатраченоВремени="Затрачено времени: ";
		Если ВремяЧасы<>0 Тогда
			СтрокаЗатраченоВремени=СтрокаЗатраченоВремени+ВремяЧасы+" ч. ";	
		КонецЕсли; 
		Если ВремяМинуты<>0 Тогда
			СтрокаЗатраченоВремени=СтрокаЗатраченоВремени+ВремяМинуты+" мин. ";	
		КонецЕсли; 
		СтрокаЗатраченоВремени=СтрокаЗатраченоВремени+ВремяСекунды+" с.";	
		Сообщить("Данные выгружены в файл "+ИмяФайла+Символы.ПС+"Количество записей: "+РезультатДок.Количество()+Символы.ПС+СтрокаЗатраченоВремени);
	КонецЕсли;	
	
КонецПроцедуры

#Область ВыгрузкаВФайл

&НаСервере
Процедура ФайлПроводки(РезультатДок,Текст, ТекстИнд, Разделитель)
	
	обработкаобъект = РеквизитФормыВЗначение("Объект");
	ТекстЗагСумма="";
	ТекстСумма="";
	ТекстЗагСодержание="";
	ТекстСодержание="";
	ТекстСчета="";
	ТекстЗагСчета="";
	Попытка
		ТекстЗагСчета=Разделитель+ТекстИнд+"СчетДт"+ТекстИнд+Разделитель+ТекстИнд+"СчетКт"+ТекстИнд;
	Исключение
		ТекстЗагСчета=Разделитель+ТекстИнд+"Счет"+ТекстИнд+Разделитель+ТекстИнд+"ВидДвижения"+ТекстИнд;
	КонецПопытки;
	Попытка 
		ТекстЗагСумма=Разделитель+ТекстИнд+"Сумма"+ТекстИнд;
	Исключение
	КонецПопытки;
	Попытка
		ТекстЗагСодержание=Разделитель+ТекстИнд+"Содержание"+ТекстИнд;
	Исключение
	КонецПопытки;
	Строка1=ТекстИнд+"ИдентификаторПроводки|"+Строка(Формат(Объект.ДатаНачала,"ДФ=""ггггММдд"""))+"|"+Строка(Формат(Объект.ДатаКонца,"ДФ=""ггггММдд"""))+ТекстИнд
			+Разделитель+ТекстИнд+"Период"+ТекстИнд
			+ТекстЗагСчета
			+ТекстЗагСумма
			+Разделитель+ТекстИнд+"ОтветственныйПоДокументу"+ТекстИнд
			+Разделитель+ТекстИнд+"Пользователь"+ТекстИнд
			+Разделитель+ТекстИнд+"Документ"+ТекстИнд
			+Разделитель+ТекстИнд+"КонтрагентИдентификатор"+ТекстИнд
			+ТекстЗагСодержание;
	Текст.ЗаписатьСтроку(Строка1);	
	Если Объект.ФлагПользователи<>2 Тогда		
		Объект.ФлагПользователи=2;
		обработкаобъект.СФормироватьЖурналы();
	КонецЕсли;
	Если Объект.ФлагПользователи=2 Тогда 
		Для каждого Стр из РезультатДок Цикл
			//Пока РезультатДок.Следующий() Цикл
			Отбор=Новый Структура();
			Отбор.Вставить("Данные", Стр.Регистратор);
			Пользователь=обработкаобъект.НайтиВЖурналеРег(Отбор); 
			ТекстСчета="";
			ТекстСумма="";
			ТекстСодержание="";
			Попытка
				ТекстСчета=Разделитель+ТекстИнд+Стр.СчетДт+ТекстИнд+Разделитель+ТекстИнд+Стр.СчетКт+ТекстИнд;
			Исключение
				ТекстСчета=Разделитель+ТекстИнд+Стр.Счет+ТекстИнд+Разделитель+ТекстИнд+Стр.ВидДвижения+ТекстИнд;
			КонецПопытки;
			Попытка 
				ТекстСумма=Разделитель+Строка(формат(Стр.Сумма,"ЧРД="".""; ЧРГ="""""));
			Исключение
			КонецПопытки;
			Попытка
				ТекстСодержание=Разделитель+ТекстИнд+СтрЗаменить(Стр.Содержание,Символы.ПС, " ")+ТекстИнд;
			Исключение
			КонецПопытки;
			Строка1=ТекстИнд+Стр.РегистраторНомер+Строка(Стр.НомерСтроки)+ТекстИнд
			+Разделитель+ТекстИнд+Строка(Формат(Стр.Период,"ДФ=""дд.ММ.гггг"""))+ТекстИнд
			+ТекстСчета
			+ТекстСумма
			+Разделитель+ТекстИнд+Стр.ОтветственныйПоДокументу+ТекстИнд
			+Разделитель+ТекстИнд+Пользователь+ТекстИнд
			+Разделитель+ТекстИнд+СтрЗаменить(Лев(Стр.Документ1,Найти(Стр.Документ1,Стр.РегистраторНомер)-1),Символы.ПС, " ")+ТекстИнд
			+Разделитель+ТекстИнд+Стр.КонтрагентИдентификатор+ТекстИнд
			+ТекстСодержание;
			Текст.ЗаписатьСтроку(Строка1);	
		КонецЦикла;	
	ИначеЕсли Объект.ФлагПользователи=1 тогда
		Для каждого стр из РезультатДок Цикл
		ТекстСчета="";
			ТекстСумма="";
			ТекстСодержание="";
			Попытка
				ТекстСчета=Разделитель+ТекстИнд+Стр.СчетДт+ТекстИнд+Разделитель+ТекстИнд+Стр.СчетКт+ТекстИнд;
			Исключение
				ТекстСчета=Разделитель+ТекстИнд+Стр.Счет+ТекстИнд+Разделитель+ТекстИнд+Стр.ВидДвижения+ТекстИнд;
			КонецПопытки;
			Попытка 
				ТекстСумма=Разделитель+Строка(формат(Стр.Сумма,"ЧРД="".""; ЧРГ="""""));
			Исключение
			КонецПопытки;
			Попытка
				ТекстСодержание=Разделитель+ТекстИнд+СтрЗаменить(Стр.Содержание,Символы.ПС, " ")+ТекстИнд;
			Исключение
			КонецПопытки;
			Строка1=ТекстИнд+Стр.РегистраторНомер+Строка(Стр.НомерСтроки)+ТекстИнд
			+Разделитель+ТекстИнд+Строка(Формат(Стр.Период,"ДФ=""дд.ММ.гггг"""))+ТекстИнд
			+ТекстСчета
			+ТекстСумма
			+Разделитель+ТекстИнд+Стр.ОтветственныйПоДокументу+ТекстИнд+
			+Разделитель+ТекстИнд+ТекстИнд+
			+Разделитель+ТекстИнд+СтрЗаменить(Лев(Стр.Документ1,Найти(Стр.Документ1,Стр.РегистраторНомер)-1),Символы.ПС, " ")+ТекстИнд
			+Разделитель+ТекстИнд+Стр.КонтрагентИдентификатор+ТекстИнд
			+ТекстСодержание;
			Текст.ЗаписатьСтроку(Строка1);	
		КонецЦикла;	
	Иначе 
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФайлКонтрагенты(РезультатДок1,Текст, ТекстИнд, Разделитель)
	
	обработкаобъект = РеквизитФормыВЗначение("Объект");
	ТекстЗагНаимПолное="";
	ТекстЗагИНН="";
	ТекстЗагЮрФизЛицо="";
	Если РезультатДок1.Колонки.Найти("НаименованиеПолное1")<>Неопределено Тогда
		ТекстЗагНаимПолное=Разделитель+ТекстИнд+"НаименованиеПолное"+ТекстИнд;
	КонецЕсли;
	Если РезультатДок1.Колонки.Найти("ИНН")<>Неопределено Тогда
		ТекстЗагИНН=Разделитель+ТекстИнд+"ИНН"+ТекстИнд;
	КонецЕсли;
	Если РезультатДок1.Колонки.Найти("ЮрФизЛицо")<>Неопределено Тогда
		ТекстЗагЮрФизЛицо=Разделитель+ТекстИнд+"ЮрФизЛицо"+ТекстИнд;
	КонецЕсли;
	КолвоПолей=РезультатДок1.Колонки.Количество();
	Строка1=ТекстИнд+"Идентификатор|"+Строка(Формат(Объект.ДатаНачала,"ДФ=""ггггММдд"""))+"|"+Строка(Формат(Объект.ДатаКонца,"ДФ=""ггггММдд"""))+ТекстИнд
			+Разделитель+ТекстИнд+"Наименование"+ТекстИнд
			+ТекстЗагНаимПолное
			+Разделитель+ТекстИнд+"Родитель"+ТекстИнд
			+ТекстЗагИНН
			+ТекстЗагЮрФизЛицо
			+Разделитель+ТекстИнд+"БанковскиеСчета"+ТекстИнд
			+Разделитель+ТекстИнд+"ДатаПервойПроводки"+ТекстИнд
			+Разделитель+ТекстИнд+"ДатаПоследнейПроводки"+ТекстИнд
			+Разделитель+ТекстИнд+"КолвоРазличныхДок"+ТекстИнд
			+Разделитель+ТекстИнд+"ЮридическийАдрес"+ТекстИнд
			+Разделитель+ТекстИнд+"ФактическийАдрес"+ТекстИнд
			+Разделитель+ТекстИнд+"Телефон"+ТекстИнд
			+Разделитель+ТекстИнд+"Факс"+ТекстИнд
			+Разделитель+ТекстИнд+СтрЗаменить(СтрЗаменить(Объект.НазвКИ,"_987654321","|"),"_"," ")+ТекстИнд;
	Текст.ЗаписатьСтроку(Строка1);		
	РазницаПолей=9-РезультатДок1.Колонки.Индекс(РезультатДок1.Колонки.Найти("ЮрАдрес"));
	БанкСчета=обработкаобъект.БанкСчетаКонтрагентов();
	Для каждого РезультатДок из РезультатДок1 Цикл	
		СтрокаСчета="";
		СтрукПоиск=Новый Структура();
		СтрукПоиск.Вставить("Идентификатор", РезультатДок.Идентификатор);
		Пока БанкСчета.НайтиСледующий(СтрукПоиск) Цикл
			СтрокаСчета=СтрокаСчета+БанкСчета.НомерСчета+"|";	
		КонецЦикла;	
		СтрокаСчета=Лев(СтрокаСчета,СтрДлина(СтрокаСчета)-1);
		СтрокаКИ="";       
		Счетчик=13-РазницаПолей;
		Пока Счетчик<КолвоПолей Цикл
			СтрокаКИ=СтрокаКИ+СтрЗаменить(РезультатДок[Счетчик],Символы.ПС, " ")+"|";
			Счетчик=Счетчик+1;
		КонецЦикла;
		ТекстНаимПолное="";
		ТекстИНН="";
		ТекстЮрФизЛицо="";
		Если РезультатДок1.Колонки.Найти("НаименованиеПолное1")<>Неопределено Тогда
			ТекстНаимПолное=Разделитель+ТекстИнд+СтрЗаменить(РезультатДок.Наименование,Символы.ПС, " ")+ТекстИнд;
		КонецЕсли;
		Если РезультатДок1.Колонки.Найти("ИНН")<>Неопределено Тогда
			ТекстИНН=Разделитель+ТекстИнд+РезультатДок.ИНН+ТекстИнд;
		КонецЕсли;
		Если РезультатДок1.Колонки.Найти("ЮрФизЛицо")<>Неопределено Тогда
			ТекстЮрФизЛицо=Разделитель+ТекстИнд+РезультатДок.ЮрФизЛицо+ТекстИнд;
		КонецЕсли;
		Строка1=ТекстИнд+РезультатДок.Идентификатор+ТекстИнд
		+Разделитель+ТекстИнд+СтрЗаменить(РезультатДок.Наименование,Символы.ПС, " ")+ТекстИнд
		+ТекстНаимПолное
		+Разделитель+ТекстИнд+СтрЗаменить(РезультатДок.Родитель,Символы.ПС, " ")+ТекстИнд
		+ТекстИНН
		+ТекстЮрФизЛицо
		+Разделитель+ТекстИнд+СтрокаСчета+ТекстИнд
		+Разделитель+ТекстИнд+Строка(Формат(РезультатДок.ДатаПервойПроводки,"ДФ=""дд.ММ.гггг"""))+ТекстИнд
		+Разделитель+ТекстИнд+Строка(Формат(РезультатДок.ДатаПоследнейПроводки,"ДФ=""дд.ММ.гггг"""))+ТекстИнд
		+Разделитель+ТекстИнд+Строка(РезультатДок.КолвоРазличныхДок)+ТекстИнд
		+Разделитель+ТекстИнд+СокрП(СтрЗаменить(РезультатДок.ЮрАдрес,Символы.ПС, " "))+ТекстИнд
		+Разделитель+ТекстИнд+СокрП(СтрЗаменить(РезультатДок.ФактАдрес,Символы.ПС, " "))+ТекстИнд
		+Разделитель+ТекстИнд+СокрП(СтрЗаменить(РезультатДок.Тел,Символы.ПС, " "))+ТекстИнд
		+Разделитель+ТекстИнд+СокрП(СтрЗаменить(РезультатДок.Факс1,Символы.ПС, " "))+ТекстИнд
		+Разделитель+ТекстИнд+СтрокаКИ+ТекстИнд;
		Текст.ЗаписатьСтроку(Строка1);	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ФайлПланСчетов(РезультатДок,Текст, ТекстИнд, Разделитель)
	Строка1=ТекстИнд+"Код"+ТекстИнд
			+Разделитель+ТекстИнд+"Наименование"+ТекстИнд;
	Текст.ЗаписатьСтроку(Строка1);	
	Для каждого стр из РезультатДок Цикл	
		Строка1=ТекстИнд+стр.Код+ТекстИнд
		+Разделитель+ТекстИнд+стр.Наименование+ТекстИнд;
		Текст.ЗаписатьСтроку(Строка1);	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ФайлЖурРег(РезультатДок,Текст, ТекстИнд, Разделитель)
	Строка1="";
	Для каждого Колонка1 Из РезультатДок.Колонки Цикл
		Если Колонка1.Заголовок<>"" Тогда
			Строка1=Строка1+ТекстИнд+Колонка1.Заголовок+ТекстИнд+Разделитель; 
		Иначе
			Строка1=Строка1+ТекстИнд+Колонка1.Имя+ТекстИнд+Разделитель; 
		КонецЕсли;
	КонецЦикла; 
    Текст.ЗаписатьСтроку(Лев(Строка1,СтрДлина(Строка1)-1));
	Для каждого СтрокаЖурнала из РезультатДок Цикл	
		Строка1="";
		Строка1=Строка1+ТекстИнд+Строка(Формат(СтрокаЖурнала[0],"ДФ=""дд.ММ.гггг ЧЧ:мм:сс"""))+ТекстИнд+Разделитель;
		Для Счетчик=1 По РезультатДок.Колонки.Количество()-1  Цикл
			Строка1=Строка1+ТекстИнд+СтрокаЖурнала[Счетчик]+ТекстИнд+Разделитель;		
		КонецЦикла;
		Текст.ЗаписатьСтроку(Лев(Строка1,СтрДлина(Строка1)-1));
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ФайлСправочники(РезультатДок,Текст, ТекстИнд, Разделитель)
	Строка1="";
	Для каждого Колонка  Из РезультатДок.Колонки  Цикл
		Строка1=Строка1+ТекстИнд+Колонка.Имя+ТекстИнд+Разделитель;
	КонецЦикла;
	Строка1=Лев(Строка1, СтрДлина(Строка1)-1);
	Текст.ЗаписатьСтроку(Строка1);
	Для каждого СтрокаТабл Из РезультатДок Цикл
		ИндексКол=0;
		Строка1="";
		Пока ИндексКол<РезультатДок.Колонки.Количество() Цикл
		 	Строка1=Строка1+ТекстИнд+СтрокаТабл[ИндексКол]+ТекстИнд+Разделитель;
			ИндексКол=ИндексКол+1;
		КонецЦикла; 
		Строка1=Лев(Строка1, СтрДлина(Строка1)-1);
	    Текст.ЗаписатьСтроку(Строка1);
	КонецЦикла; 
	Объект.ФлагПользователи=1;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроверкаЗаполнения
// Функция проверяет значение поля и при отсутствии значения выдает сообщение
&НаКлиенте
Функция ПроверкаЗаполнения(Поле1, НазваниеПоля) 
	ТипПоля=ТипЗнч(Поле1); 	 	
	// В зависимости от типа поля, проверяем его значения. Если нет значения, то выводим сообщение.
	Если Поле1=Неопределено или ((ТипПоля=Тип("Строка")) и (Поле1="")) или (ТипПоля=Тип("Дата")) и (Поле1='00010101') или (ТипПоля=Тип("Число") и (Поле1=0) ) Тогда
		ПоказатьПредупреждение(,НазваниеПоля+": не заполнено")	;
		Возврат Ложь;
	Иначе	
		Возврат Истина		
	КонецЕсли; 
КонецФункции

// Функция проверяет корректность ввода дат: дата начала должна быть раньше, чем дата конца.
&НаКлиенте
Функция ПроверкаДат(ДатаНачала,ДатаКонца) 
	Если ДатаНачала>ДатаКонца Тогда
		ПоказатьПредупреждение(,"Дата начала периода задана позже даты конца периода!")	;
		Возврат Ложь;
    Иначе
		Возврат Истина;
	КонецЕсли; 	
КонецФункции


&НаКлиенте
Процедура Назад(Команда)
	СменитьСтраницу("ГруппаГлавная");
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	для каждого КлючЗначение из ПолеСпискаРеквизитов Цикл
		КлючЗначение.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)
	
	для каждого КлючЗначение из ПолеСпискаРеквизитов Цикл
		КлючЗначение.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораСправочникаПриИзменении(Элемент)
	
	ЗаполнитьСписокПолейСправочника();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПолейСправочника()
	
	РеквизитыСписок=Новый СписокЗначений();
	РеквизитыСписок1=Новый СписокЗначений();
	МетаданныеСправочника=Метаданные.Справочники.Найти(ПолеВыбораСправочника);
	Для каждого РеквизитСсылка Из МетаданныеСправочника.СтандартныеРеквизиты Цикл
		РеквизитыСписок.Добавить(РеквизитСсылка.Имя);	
	КонецЦикла;
	РеквизитыСписок.СортироватьПоЗначению();
	Для каждого РеквизитСсылка Из МетаданныеСправочника.Реквизиты Цикл
		РеквизитыСписок.Добавить(РеквизитСсылка.Имя);	
	КонецЦикла; 
	РеквизитыСписок1.ЗагрузитьЗначения(РеквизитыСписок.ВыгрузитьЗначения());
	ПолеСпискаРеквизитов=РеквизитыСписок;
    Элементы.ПолеВыбораСортировки.СписокВыбора.ЗагрузитьЗначения(РеквизитыСписок1.ВыгрузитьЗначения());
	Если РеквизитыСписок.НайтиПоЗначению("Код")<>Неопределено Тогда
		ПолеВыбораСортировки="Код";
	Иначе
		ПолеВыбораСортировки="Наименование";
	КонецЕсли; 		
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСписокСправочники(Команда)
	
	ОтмеченныеРеквизиты=Новый Массив();
	Для каждого Реквизит Из ПолеСпискаРеквизитов Цикл
		Если Реквизит.Пометка Тогда
			ОтмеченныеРеквизиты.Добавить(Реквизит.Значение)	
		КонецЕсли;
	КонецЦикла;
	Если ОтмеченныеРеквизиты.Количество()=0 Тогда
		ПоказатьПредупреждение(,"Не отмечено ни одного реквизита!");
		Возврат;
	КонецЕсли; 
	
	АдресТабДок = ВывестиСписокСправочникиСервер(ОтмеченныеРеквизиты);
	Если АдресТабДок <> Неопределено Тогда
		табДок = ПолучитьИзВременногоХранилища(АдресТабДок);
		ТабДокСправочники = табДок;
		КолЗаписейЗначТекстСправочники = табДок.высотаТаблицы - 1;
	Иначе
		ТабДокСправочники = новый ТабличныйДокумент;
		КолЗаписейЗначТекстСправочники = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВывестиСписокСправочникиСервер(ОтмеченныеРеквизиты)
	
	Адрес = Неопределено;
	
	обработкаОбъект = РеквизитФормыВЗначение("Объект");
	Запрос1=Новый Запрос();
	Запрос1.Текст=обработкаОбъект.ТекстЗапросаСправочники(ПолеВыбораСправочника, ПолеВыбораСортировки,ОтмеченныеРеквизиты);
	Попытка
		РезультатЗапроса= Запрос1.Выполнить();
	Исключение
		ТекстОшибки=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ТекстОшибки,"Недопустимое поле для упорядочивания")<>0 Тогда
			Сообщить("Невозможно сортировать список по выбранному реквизиту."+Символы.ПС+"Выберите другой реквизит для сортировки."); 
		КонецЕсли;
		Возврат Адрес;
	КонецПопытки;
	
	мРезЗапроса=РезультатЗапроса;
	
	Если мРезЗапроса <> Неопределено Тогда
		
		ТабДок = новый ТабличныйДокумент;
		
		КоличествоКолонок = мРезЗапроса.Колонки.Количество();

		Выборка = мРезЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);

        ДетальнаяСтрока = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьОбщихИтогов = ТабДок.ПолучитьОбласть(1, , 1, );
	    ОбластьОбщихИтогов.Область().Шрифт = Новый Шрифт(ОбластьОбщихИтогов.Область().Шрифт, , , Истина, , ,);
		ОбластьИерархическихЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
	    ОбластьИерархическихЗаписей.Область().Шрифт = Новый Шрифт(ОбластьИерархическихЗаписей.Область().Шрифт, , , Истина, , ,);
		ОбластьГрупповыхЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
	    ОбластьГрупповыхЗаписей.Область().Шрифт = Новый Шрифт(ОбластьГрупповыхЗаписей.Область().Шрифт, , , Истина, , ,);
		ОбластьЗаголовка = ТабДок.ПолучитьОбласть(1, , 1, );
		
		Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
			Область = ОбластьЗаголовка.Область(1, ТекущееПоле + 1);
			Область.Текст = мРезЗапроса.Колонки[ТекущееПоле].Имя;
            Область.ШиринаКолонки = мРезЗапроса.Колонки[ТекущееПоле].Ширина;
		КонецЦикла;
		ТабДок.Вывести(ОбластьЗаголовка);
		ОбластьЗаголовка = ТабДок.Область(1, 1, 1, КоличествоКолонок);
		
		ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , , Истина, , ,);
		ОбластьЗаголовка.ЦветФона = WebЦвета.ЦветокБелый;
		ОбластьЗаголовка.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

        ТабДок.НачатьАвтогруппировкуСтрок();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
				ИсходнаяСтрока = ОбластьГрупповыхЗаписей;
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда 
				ИсходнаяСтрока = ОбластьИерархическихЗаписей;
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда 
				ИсходнаяСтрока = ОбластьОбщихИтогов;
			Иначе
				ИсходнаяСтрока = ДетальнаяСтрока;
			КонецЕсли;
				
			Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
				Область = ИсходнаяСтрока.Область(1, ТекущееПоле + 1);
				Область.Текст = Выборка[ТекущееПоле];
			КонецЦикла;
			ТабДок.Вывести(ИсходнаяСтрока, Выборка.Уровень());
		КонецЦикла;
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		Адрес = ПоместитьВоВременноеХранилище(ТабДок);
		
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура ТекстФайлСправочники(Команда)
	
	мОтмеченныеРеквизиты.Очистить();
	Для каждого Реквизит Из ПолеСпискаРеквизитов Цикл
		Если Реквизит.Пометка Тогда
			мОтмеченныеРеквизиты.Добавить(Реквизит.Значение)	
		КонецЕсли;
	КонецЦикла;
	Если мОтмеченныеРеквизиты.Количество()=0 Тогда
		ПоказатьПредупреждение(,"Не отмечено ни одного реквизита!");
		Возврат;
	КонецЕсли; 
	
	ОткрытьФорму("ВнешняяОбработка.DeloitteDownload.Форма.ФормаТекстФайлУправляемая",,,,,,Новый ОписаниеОповещения("ПослеЗакрытияФормыСохранить",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	если Объект.режим = "Выгрузка журнала регистрации" Тогда
		
		если Объект.организация = "данным" Тогда
			элементы.ГруппаТаблицы.ТекущаяСтраница = Элементы.стрТабЖурналаДанные;
		ИначеЕсли Объект.организация = "пользователям" Тогда
			элементы.ГруппаТаблицы.ТекущаяСтраница = Элементы.стрТабЖурналаПользователи;
		ИначеЕсли Объект.организация = "изменениям конфигурации" Тогда
			элементы.ГруппаТаблицы.ТекущаяСтраница = Элементы.СтрТабЖурналаИзменения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиКоличество(Команда)
	
	// В зависимости от того, что записано в переменной Режим, выполняем соответствующие процедуры, описанные выше
	Если Объект.Режим="Выгрузка списка проводок" Тогда
		ВывестиКоличествоПроводокКлиент();
	ИначеЕсли Объект.Режим="Выгрузка списка контрагентов" Тогда
	    ВывестиКоличествоКонтрагентовКлиент();
	ИначеЕсли Объект.Режим="Выгрузка журнала регистрации" Тогда
	    ВывестиКолвоЖурРегКлиент();
	Иначе
		ВывестиКоличествоСчетовКлиент();
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиКоличествоПроводокКлиент()
	// Проверяем правильность заполнения дат и организации. Если неправильно, то прекращаем работу процедуры. 
	Если (Не ПроверкаЗаполнения(Объект.ДатаНачала, "Дата начала периода")) или (Не ПроверкаЗаполнения(Объект.ДатаКонца, "Дата конца периода"))или (НЕ ПроверкаДат(Объект.ДатаНачала,Объект.ДатаКонца)) или (Элементы.Организация.Доступность и (Не ПроверкаЗаполнения(Объект.Организация, "Организация"))) Тогда
    	Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(,Строка(ВывестиКоличествоПроводокСервер())+" записей");
	
КонецПроцедуры

&НаСервере
Функция ВывестиКоличествоПроводокСервер()
	
	// Если запрос не выполнялся...
	Если не РезультатСформирован Тогда
		обработкаобъект = РеквизитФормыВЗначение("Объект");
		Запрос1=Новый Запрос();
		// Формируем текст запроса. Функция описана ниже.
		Запрос1.Текст=обработкаобъект.ТекстЗапросаПроводкиКоличество();
		Запрос1.УстановитьПараметр("ДатаНачала",Объект.ДатаНачала);
		Запрос1.УстановитьПараметр("ДатаКонца",Объект.ДатаКонца);
		Запрос1.УстановитьПараметр("Организация",Объект.Организация);
		Результат1=Запрос1.Выполнить().Выбрать();
		// В результате запроса всего одна строка. Переходим к ней
		Пока Результат1.Следующий() Цикл
			// Берем значение из выгруженного поля "Всего" и выводим сообщение о кол-ве записей.
			Возврат Результат1.Всего;
		КонецЦикла;	
		// Если запрос уже выполнялся, то берем кол-во записей в РезультатЗапроса и выводим сообщение о кол-ве записей	
	Иначе
		Возврат ТабПроводок.Количество();
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ВывестиКоличествоКонтрагентовКлиент()
	Если Объект.НазваниеСправКонтрагенты="" Тогда
		НазваниеСправочникаКонтрагентов();
		Если Объект.НазваниеСправКонтрагенты="" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	// Если запрос не выполнялся...
	Если ТабКонтрагенты.Количество() = 0 Тогда
	    ПоказатьПредупреждение(,Строка(ВывестиКоличествоКонтрагентовСервер())+" записей");
	Иначе
		ПоказатьПредупреждение(,Строка(ТабКонтрагенты.Количество())+ " записей");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВывестиКоличествоКонтрагентовСервер()
	
	Запрос1=Новый Запрос();
	// Формируем текст запроса. Функция описана ниже.
	Запрос1.Текст=ТекстЗапросаКонтрагентыКоличество(Объект.НазваниеСправКонтрагенты);
	Результат1=Запрос1.Выполнить().Выбрать();
	// В результате запроса всего одна строка. Переходим к ней
	Пока Результат1.Следующий() Цикл
		Возврат Результат1.Всего;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаКонтрагентыКоличество(НазваниеСправКонтрагенты) 
	ТекстЗапроса="ВЫБРАТЬ
	             |	СУММА(1) КАК Всего
	             |ИЗ
				 // НазваниеСправКонтрагенты содержит название справочника контрагентов
				 |	Справочник."+НазваниеСправКонтрагенты+" КАК Контрагенты
	             |ГДЕ
	             |	Контрагенты.ПометкаУдаления = ЛОЖЬ
	             |	И (НЕ Контрагенты.НаименованиеПолное ЕСТЬ NULL )
	             |	И (НЕ ПОДСТРОКА(Контрагенты.НаименованиеПолное, 1, 1) = """")";
	Возврат ТекстЗапроса;
КонецФункции

&НаКлиенте
Процедура ВывестиКолвоЖурРегКлиент()
	Если не РезультатСформирован и ((Не ПроверкаЗаполненияКонтрагенты(Объект.ДатаНачала,Объект.ДатаКонца)) или(НЕ ПроверкаДат(Объект.ДатаНачала,Объект.ДатаКонца))) Тогда
		Возврат;	
	КонецЕсли;
	ПоказатьПредупреждение(,Строка(ВывестиКолвоЖурРегСервер())+ " записей"); 
КонецПроцедуры

&НаСервере
Функция ВывестиКолвоЖурРегСервер()
	Если не РезультатСформирован Тогда 
		обработкаобъект = РеквизитФормыВЗначение("Объект");
		РезультатЗапроса=Новый ТаблицаЗначений();
		РезультатЗапроса=обработкаобъект.СформироватьЖурналыДляВыгрузки();
		Если РезультатЗапроса=Неопределено Тогда
			Возврат 0;
		Иначе
			Возврат РезультатЗапроса.количество();
		КонецЕсли;
	Иначе
		Если Объект.организация = "данным" Тогда
			Возврат ТабЖурналаДанные.Количество();
		ИначеЕсли Объект.организация = "пользователям" Тогда
			Возврат ТабЖурналаПользователи.Количество();
		ИначеЕсли Объект.организация = "изменениям конфигурации" Тогда
			Возврат ТабЖурналаИзменения.Количество();
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ВывестиКоличествоСчетовКлиент()
	ПоказатьПредупреждение(,Строка(ВывестиКоличествоСчетовСервер())+ " записей");
КонецПроцедуры

&НаСервере
Функция ВывестиКоличествоСчетовСервер()
	Если не РезультатСформирован Тогда
		Запрос1=Новый Запрос();
		// Формируем текст запроса. Функция описана ниже.
		Запрос1.Текст=ТекстЗапросаПланСчетовКоличество(Объект.ПланСчетовНазвание);
		Результат1=Запрос1.Выполнить().Выбрать();
		// В результате запроса всего одна строка. Переходим к ней
		Пока Результат1.Следующий() Цикл
			// Берем значение из выгруженного поля "Всего" и выводим сообщение о кол-ве записей.
			Возврат Результат1.Всего;
		КонецЦикла;	
		// Если запрос уже выполнялся, то берем кол-во записей в РезультатЗапроса и выводим сообщение о кол-ве записей	
	Иначе
		Возврат ТабПланСчетов.Количество();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаПланСчетовКоличество(ПланСчетовНазвание) 
	ТекстЗапроса="ВЫБРАТЬ
	             |	СУММА(1) КАК Всего
	             |ИЗ
	             |	ПланСчетов."+ПланСчетовНазвание;
	Возврат ТекстЗапроса;
КонецФункции 

&НаКлиенте
Функция ПроверитьКонтрагентов()
	
	Если ТаблицаСоответствияПолей.Количество() <> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПроверкаКонтрагенты();
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаКонтрагенты()
	
	РеквизитыСписок =СформироватьРеквизитыКонтрагентов(Объект.НазваниеСправКонтрагенты);		

	НовСтр = ТаблицаСоответствияПолей.Добавить();
	НовСтр.СтароеПоле = "НаименованиеПолное";
	НовСтр = ТаблицаСоответствияПолей.Добавить();
	НовСтр.СтароеПоле = "ИНН";
	НовСтр = ТаблицаСоответствияПолей.Добавить();
	НовСтр.СтароеПоле = "ЮрФизЛицо";
	
	Для каждого Стр Из ТаблицаСоответствияПолей  Цикл
		РеквПоиска = РеквизитыСписок.Найти(Стр.СтароеПоле);
		Если РеквПоиска=Неопределено Тогда
			//Запросим	
			ОткрытьФорму("ВнешняяОбработка.DeloitteDownload.Форма.ФормаПроверкаРеквизитовУправляемая",Новый Структура("РеквизитДляПроверкиОбщ,РегистрПроводки,НазваниеСправКонтрагенты",Стр.СтароеПоле,Объект.РегистрПроводки,Объект.НазваниеСправКонтрагенты),,,,,новый ОписаниеОповещения("ПослеВыбораРеквизита", ЭтотОбъект, Новый Структура("СтрокаСоответствия", Стр)),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			стр.НовоеПоле = РеквизитыСписок[РеквПоиска];
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораРеквизита(Результат,ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ДопПараметры.СтрокаСоответствия.НовоеПоле = Результат;
	Иначе
		ДопПараметры.СтрокаСоответствия.НовоеПоле = ДопПараметры.СтрокаСоответствия.СтароеПоле;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьРеквизитыКонтрагентов(НазваниеСправКонтрагенты) экспорт
	РеквизитыСписок=Новый Массив();
	МетаданныеСправКонтр=Метаданные.Справочники.Найти(НазваниеСправКонтрагенты);
	Для каждого РеквизитСсылка Из МетаданныеСправКонтр.Реквизиты  Цикл	
		РеквизитыСписок.Добавить(РеквизитСсылка.Имя);
	КонецЦикла;
	Возврат РеквизитыСписок; 
КонецФункции

#КонецОбласти
